[
  
  {
    "title": "vite preview 实现原理",
    "url": "/posts/vite-preview-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/",
    "categories": "【vite, 源码阅读]",
    "tags": "vite",
    "date": "2024-02-28 14:36:00 +0800",
    





    
    "snippet": "  最近在查看vue3源码的时候，突发奇想，想去了解一下 vue代码的运行环境，具体怎么执行的，vite dev\\build\\preview 都做了什么，由于 preview是预览 build打包好的项目文件的，考虑到会比较简单一点，所以先从vite preview 指令开始，看它的运行原理我先不看代码，大概设想一下，是个本地开的静态服务，和我本地的nginx 类似的。接着看源码，  查看p...",
    "content": "  最近在查看vue3源码的时候，突发奇想，想去了解一下 vue代码的运行环境，具体怎么执行的，vite dev\\build\\preview 都做了什么，由于 preview是预览 build打包好的项目文件的，考虑到会比较简单一点，所以先从vite preview 指令开始，看它的运行原理我先不看代码，大概设想一下，是个本地开的静态服务，和我本地的nginx 类似的。接着看源码，  查看package.json文件，找到 bin 属性，看到指令执行文件是 bin/vite.js然后vite.js代码我发现接着的指令生成文件 vite/src/node/cli.ts  vite指令的是由cac实现的.  搜索preview查看到vite 发现preview代码内部实现文件在  vite/src/node/preview.ts，  看源码要尽量学会化繁为简，抽离到最小系统去看哈在preview.ts文件的 preview 函数里面，就是vite preview的内部实现逻辑，我发现，它是基于connect.js 中间件框架实现的，  const app = connect();  // app: function app(req, res, next){ app.handle(req, res, next); }   const httpServer = await resolveHttpServer(    config.preview,    app,    await resolveHttpsConfig(config.preview?.https),  )化繁为简哈，由于我们直接 vite preview 就开启了预览服务，看代码我们也不加任何参数，看基本实现。app是中间件应用，是一个函数哈，httpServer 是写在另一个文件里面的，文件多，看着就很绕，不必要的代码忽视他们，按最基本的代码逻辑去看。不知道 connect 的可以去了解了解，很简单哈，Connect是一个可扩展的HTTP服务器框架，用于使用被称为中间件的“插件”的节点。不要想的太复杂哈，接着我们看httpServer 所在的文件，哦，是resolveHttpServer，在http.ts文件里，如下：看到了吧，我们还是按照最基本的逻辑去看，其他多余的逻辑不看，resolveHttpServer里面，使用的是node的api,createServer;  参数是 app,  我们回头复习一下，createServer的参数是一个function ,现在是 app这个变量，即connect(),const server = http.createServer((req, res) =&gt; {  res.setHeader('Content-Type', 'text/html');  res.setHeader('X-Foo', 'bar');  res.writeHead(200, { 'Content-Type': 'text/plain' });  res.end('ok');}); 接着我们再回到preview.ts主文件接着往下看：看到了吧，connect的use方法，中间件一个一个的去连接使用，这就像装饰器，这就像链式调用，这就像错误拦截，一层一层的，每一个中间件都执行了对响应的一种功能要求和处理逻辑，通过next()连接下去。corsMiddlewareproxyMiddlewarecompressionviteAssetMiddlewarehtmlFallbackMiddleware 等等。 具体connect 可看 connect我们还是化繁为简，我们只看最基础的 preview怎么实现的，我们接着看到最后，按照connect的逻辑，找到server.listen,  在preview.ts文件中的 preview指令最后调用了  httpServerStart方法，该方法也在 http.ts文件里面，export async function httpServerStart(  httpServer: HttpServer,  serverOptions: {    port: number    strictPort: boolean | undefined    host: string | undefined    logger: Logger  },): Promise&lt;number&gt; {  let { port, strictPort, host, logger } = serverOptions  return new Promise((resolve, reject) =&gt; {    const onError = (e: Error &amp; { code?: string }) =&gt; {      if (e.code === 'EADDRINUSE') {        if (strictPort) {          httpServer.removeListener('error', onError)          reject(new Error(`Port ${port} is already in use`))        } else {          logger.info(`Port ${port} is in use, trying another one...`)          httpServer.listen(++port, host)        }      } else {        httpServer.removeListener('error', onError)        reject(e)      }    }    httpServer.on('error', onError)    httpServer.listen(port, host, () =&gt; {      httpServer.removeListener('error', onError)      resolve(port)    })  })}如上所示，我们看完了整个preview内部实现流程，其实就是一个node服务，基于connect中间件框架，中间加了各种服务请求处理的中间件，最后监听服务，然后打开浏览器访问。那我们是怎么指定dist文件并访问打包的项目的呢？在vite preview里面使用了一个关键的中间件 viteAssetMiddleware它指向的是 sirv(xx…)：sirv这个单词不好理解，我的理解是 serve,谐音词，sirv.js 执行之后返回的也是一个 function mid(req,res,next){} 中间件，它的作用是加载静态资源的，访问静态资源，相关的各种全面的响应处理， sirv。具体实现可以预览如下：代码里可以看到，核心到最后是 send(req, res, data.abs, data.stats, data.headers);我们再看一下 send方法里面的实现逻辑：最终它的逻辑还是回到了res.writeHead(code, headers);fs.createReadStream(file, opts).pipe(res);综上所述，vite preview 就是开了一个node createServe ，基于connect.js中间件框架，使用了sirv静态服务处理中间件，然后监听端口，访问页面。中间还加了各种之上的中间件。下面是我简化使用的代码：  vite里面简化的:import http from 'node:http'import fs from 'node:fs';import connect from 'connect'import sirv from 'sirv'const distDir = ('./sirv-test-dist')const si = sirv(distDir, {  etag: true,  dev: true,  extensions: [],  ignores: false,})console.log(String(si),'si---')const app = connect();const server = http.createServer(app)app.use(si)server.listen('3032')console.log(server,'server--','http://127.0.0.1:3032')  使用最原始的createServer 模仿一个： ```js import http from ‘node:http’import fs from ‘node:fs’;import sirv from ‘sirv’import { parse } from ‘@polka/url’;const distDir = (‘./sirv-test-dist’)const si = sirv(distDir, {  etag: true,  dev: true,  extensions: [],  ignores: false,})const server = http.createServer((req, res) =&gt; {  // one  中间件可以在createServer里面直接执行的，可以不携带next,  //在connect里面是当中间件使用，在这里直接使用也是可以通过的  // si(req,res);// two  if(req.method==’GET’&amp;&amp;req.url==’/index.html’){    console.log(req)    res.writeHead(200, { ‘Content-Type’: ‘text/html’ });fs.createReadStream('./dist/index.html').pipe(res)   }else if(req.method=='GET'){let mimeType = req.url.split('.')[1]let ms={  js:'javascript',  css:'css',  ico:'ico'}console.log(mimeType,'mmmm====')res.writeHead(200,{ 'Content-Type': `text/${ms[mimeType]}` });fs.createReadStream('./dist'+req.url).pipe(res)    } });server.listen(3033)console.log(server,’server–’,’http://127.0.0.1:3033’) ```all in all,以上基本阅读了vite preview 的实现逻辑，也自行模仿了一下，换个原始方式写了一下，但是模仿的毕竟考虑的综合细节因素不全面，还是使用人家写好的比较好。  查看源码就像 开锁 破解密码 拆解飞机构造等等，有的简单，有的非常难，这不是代码本身的，而是里面的逻辑很复杂，而且代码各种抽离，你要翻山越岭，俄罗斯套娃一般去理清逻辑，挺不简单的，有的时候适当浅尝辄止也好的，毕竟人家花费几年时间、精力才写好的，交付给应用开发人员的阶段性产品，我们可以按文档使用，可以窥探源码实现原理，但是还要量力而行，以实际组合应用为主，社会分工各个环节不同，没精力掌握所有环节。本人最近在换工作，求机会哈"
  },
  
  {
    "title": "元宇宙初探",
    "url": "/posts/%E5%85%83%E5%AE%87%E5%AE%99/",
    "categories": "【技术前沿]",
    "tags": "技术前沿",
    "date": "2024-02-21 11:51:00 +0800",
    





    
    "snippet": "元宇宙入口    🌾元宇宙这两天又掀起了一个小高潮，再了解一下，到底它是什么.进入网址 搜 未来城，开辟新区块",
    "content": "元宇宙入口    🌾元宇宙这两天又掀起了一个小高潮，再了解一下，到底它是什么.进入网址 搜 未来城，开辟新区块"
  },
  
  {
    "title": ".prettierrc.js不起作用了？",
    "url": "/posts/prettierrc.js%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E4%BA%86%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",
    "categories": "【工具相关]",
    "tags": "工具相关",
    "date": "2024-01-05 10:06:00 +0800",
    





    
    "snippet": ".prettierrc.js 不起作用了，发生了什么  🌾这两天想着把公司目前使用的前端组件、工具、框架各种做一次升级，升级了 vite-5.0.10,发现.prettierrc.js代码格式化配置文件不起作用了第一件事就是上网搜症状，这个问题是大概什么情况，经过一番了解，vite-5.x vue脚手架默认的模块化模式为 ESM模式，type:module然后原来的 .prettierrc....",
    "content": ".prettierrc.js 不起作用了，发生了什么  🌾这两天想着把公司目前使用的前端组件、工具、框架各种做一次升级，升级了 vite-5.0.10,发现.prettierrc.js代码格式化配置文件不起作用了第一件事就是上网搜症状，这个问题是大概什么情况，经过一番了解，vite-5.x vue脚手架默认的模块化模式为 ESM模式，type:module然后原来的 .prettierrc.js 里面使用的还是 cjs模式里面还是module.exports经过一番尝试，最终把 .prettierrc.js 文件名猴嘴 js更改为 cjs, 问题得到了解决。文档原文：配置 ESM 为默认，如果需要则选择 CJS： 在项目 package.json 中添加 “type”: “module”。所有 *.js 文件现在都被解释为 ESM，并且需要使用 ESM 语法。你可以将一个文件重命名为 .cjs 扩展名来继续使用 CJS。"
  },
  
  {
    "title": "推荐一个node工具，可以根据配置参数生成文件层级目录，以及文件内容",
    "url": "/posts/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AAnode%E5%B7%A5%E5%85%B7-%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E5%B1%82%E7%BA%A7%E7%9B%AE%E5%BD%95-%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9-copy/",
    "categories": "【工具相关]",
    "tags": "node相关",
    "date": "2023-12-04 18:06:00 +0800",
    





    
    "snippet": "fs-json-to-files使用这个node工具 可以在配置了文件目录结构，文件模板类型之后，一键快速生成你想要的文件夹、文件、文件内容，提高生产力，好东西。具体看下面介绍哈：use it, you can create you project folders by folder json data, width any you template content;More specifi...",
    "content": "fs-json-to-files使用这个node工具 可以在配置了文件目录结构，文件模板类型之后，一键快速生成你想要的文件夹、文件、文件内容，提高生产力，好东西。具体看下面介绍哈：use it, you can create you project folders by folder json data, width any you template content;More specifically，this is a tool, generate your project folders,keep you folder structure, fill template content your configured;i search in the web,many content about folders generate text tree, like:tree;then it give me a snippet every time i build a new project, many folders、files require to create, need to fill content,if tree has reverse operation,it will be great;i search in the web, Almost no discovery of this feature；npm 、github 、or Blog、Forum；so i did it , It took half a day , then It took another half day to publish。usage:// example.jsimport { genFilesByJsonData } from \"fs-json-to-files\";import { temps } from \"./tmpData.js\";import { fileJsonData } from \"./fileJsonData.js\";genFilesByJsonData(temps, fileJsonData);// You can use it when creating projects, updating requirements,// and planning to create multiple file structures,// instead of manually generating them one by onehis directory will be the current directory where your node command is executed  node example.jsthe fileJsonData example:// fileJsonData.js// I prefer to use this data structure here,// which is a one-to-one mapping of file structures without sub arrays such as children// each Object will renerate one folder, the inner Object is also，done and done,// if the value of key is type of string, it will be defined as a file,it can be followed a '-' ,// the later is content template type that will fill.if no,the file will a empty file, no bad impact.export const fileJsonData = {  src: {    views: {      app: \"app.vue-tempVue\",    },    config: \"config.js-tempA\",    common: {      util: \"util.js-tempA\",      data: {        a: \"a.js-tempA\",        b: {          bb: \"bb.js-tempB\",          cc: \"cc.js-tempB\",        },      },    },  },};the temps example:// tmpData.js// I have chosen to put the template type in a separate file, corresponding to the template in the JSON data file just nowexport const temps = {  tempVue: `    &lt;template&gt;      &lt;div&gt;&lt;/div&gt;    &lt;/template&gt;        &lt;script setup&gt;        &lt;/script&gt;    &lt;style lang=\"less\"&gt;        &lt;/style&gt;  `,  tempA: `    export const A = ()=&gt;{      console.log('23333')    }  `,  tempB: `  export const B = ()=&gt;{    console.log('b3333')  }`,};  node出现的作用，我的理解是提供了模块化开发的解决方案，让前端进一步实现工程化；node 作为一门后端语言，为前端开发者提供了可能，可以写后端服务代码，可以进行文件读写操作等各种，可以执行shell指令；是前端能力的扩展。 npm、webpack、express、koa、egg、以及各种编译打包的工具 都是基于node开发，为前端的开发提供了许多有效的工具、助手。"
  },
  
  {
    "title": "js设计模式-组合模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js设计模式",
    "date": "2023-11-22 11:20:00 +0800",
    





    
    "snippet": "组合模式。  抽离封装、继承、多态、是贯穿于世间所有科学发展的项目的哈，包括软件、硬件，以及实体建筑工程、工业、等等。。。，然后作用到实际场景、维度、可能名称会有点大同小异，但是哲学理念是一样的。装饰器模式和适配器模式从实现哲理上还是有类似的共通之处的，只是作用维度不同，名称不同，细节不同。—当我们要学习使用它的时候，还是要落到实处去学习一下具体应用领域的专业细节的。  用一天的时间，抽空看...",
    "content": "组合模式。  抽离封装、继承、多态、是贯穿于世间所有科学发展的项目的哈，包括软件、硬件，以及实体建筑工程、工业、等等。。。，然后作用到实际场景、维度、可能名称会有点大同小异，但是哲学理念是一样的。装饰器模式和适配器模式从实现哲理上还是有类似的共通之处的，只是作用维度不同，名称不同，细节不同。—当我们要学习使用它的时候，还是要落到实处去学习一下具体应用领域的专业细节的。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。下面讲一下具体案例"
  },
  
  {
    "title": "js设计模式-装饰者模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js设计模式",
    "date": "2023-11-22 11:20:00 +0800",
    





    
    "snippet": "装饰者模式装饰者模式，在js设计模式书中以自行车售卖为例做了讲解：一辆自行车是一个基础类，现在要根据不同的用户需求，可能需求加车前灯、后灯、车铃、刹车盘、轮毅等，对应的价格也会再基础类之上有所不同。前灯、后灯、刹车盘。。。就是自行车的装饰。装饰者模式的大概理解如此。  抽离封装、继承、多态、是贯穿于世间所有科学发展的项目的哈，包括软件、硬件，以及实体建筑工程、工业、等等。。。，然后作用到实际...",
    "content": "装饰者模式装饰者模式，在js设计模式书中以自行车售卖为例做了讲解：一辆自行车是一个基础类，现在要根据不同的用户需求，可能需求加车前灯、后灯、车铃、刹车盘、轮毅等，对应的价格也会再基础类之上有所不同。前灯、后灯、刹车盘。。。就是自行车的装饰。装饰者模式的大概理解如此。  抽离封装、继承、多态、是贯穿于世间所有科学发展的项目的哈，包括软件、硬件，以及实体建筑工程、工业、等等。。。，然后作用到实际场景、维度、可能名称会有点大同小异，但是哲学理念是一样的。装饰器模式和适配器模式从实现哲理上还是有类似的共通之处的，只是作用维度不同，名称不同，细节不同。—当我们要学习使用它的时候，还是要落到实处去学习一下具体应用领域的专业细节的。由于装饰者模式在js的具体示例适当有点冗长，该篇文章也是本人对该模式的阅读之后的理解，希望帮自己增进知识，也顺便可能帮到别人我个人认为这个模式，应该先从概念理解和优缺点以及应用场景开始讲比较好。装饰者模式优点装饰者是在运行期间为对象增添特性或职责的有力工具。在自行车商店那个例子中，逦过使用裝饰者，你可以动态地为自行车对象添加可选的特色配件。在只有部分对象需要这些特性的情况下装饰者模式的好处尤为突出。如果不采用这种模式，那么要想实现同样的效果必须使用大量子类。裝饰者的运作过程是透明的，这就是说你可以用它包装其他对象，然后继续按之前使用那些对象的方法来使用它。从MethodProfiler这个示例中可以看到，这一切甚至可以动态实现，不用事先知道组件对象的接口。在为现有对象添砖加瓦这方面，装饰者模式为程序员带来了极大的灵活性。装饰者模式缺点装饰者模式的缺点主要表现在两个方面：首先，在遇到用装饰者包装起来的对象时，那些依赖于类型检查的代码会出问题。尽管在JavaScript中很少使用严格的类型检查，但是如果你的代码中执行了这样的检查，那么装饰者是无法匹配所需要的类型的。通常装饰者对客户代码来说是完全透明的，不过，在这种情况下，客户代码就能感知装饰者与其组件的不同。其次，使用装饰者模式往往会增加架构的复杂程度。这种模式常常要引入许多小对象，它们看起来比较相似（参见自行车商店一例），而实际功能却大相径庭。装饰者棪式往往不太容易理解，对于那些不熟悉这种模式的开发人员而言尤其如此。此外，实现具有动态接口的装饰者（如MethodProfiler）沙及的语法细节有时也会令人生畏。在设计一个使用了装饰者模式的架构时，你必须多花点心思，确保自己的代码有良好的文档说明，并且容易理解。总之本章讲述了一种既不用创建子类，又能透明、动态地为对象增添功能的设计模式。装饰者棪式可以在不修改类定义的前提下用来为具体对象添加特性。我们再次研究了自行车商店的例子，并用工厂模式来创建具有多种可定制选件的自行车。我们讨论了装饰者修改其包装的对象的各种做法，以及与每种做法相关的一些注意事项。作为一个实用性的练习，我们还创建了一个具有动态接口的装饰者，它可以用来记录执行一个对象的方法所耗费的时间。只要懂得裝饰者模式的工作机制，你就会明白它是多么有用。我们用7个装饰者就完成了本*需要几千个子类才能完成的任务，这足以说明问题。监于装饰者的完全透明性，使用这种模式时你不用老是担心系统会因此而失灵或产生不兼容问题。这是一种不用重新定义对象就能对其进行扩充的简便手段。尽可能建议在合适需要的地方，该用的地方再用，这个要自己判断一下  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。下面讲一下具体案例装饰器是装饰者模式的具体实现，现实应用中，typescript对装饰器模式有明确的使用实现。比如类的装饰可以类似下面这样：// 类的装饰器  @decortaor  class MyTestableClass {    // ...  }  function decortaor(target){    target.isTestable = true;  }  MyTestableClass.isTestable  // true;// 装饰类的属性 class Person{  @readonly  name(){    return this.first;  } } function readonly(target,name,descriptor){   // descriptor对象原来的值如下  // {  //   value: specifiedFunction,  //   enumerable: false,  //   configurable: true,  //   writable: true  // };  descriptor.writeable = false;  return descriptor; } readonly(Person.prototype,'name',descriptor)//  类似于Object.defineProperty(Person.prototype,'naem',descriptor)// 类的方法装饰器class C{  @addPrefix  toString(){    return 'str'  }}function addPrefix(target){  return 'pre'+target()}// 相当于 C.prototype.toString = addPrefix(C.prototype.toString)上面的部分示例装饰typescript的应用实现，如果用原生js实现装饰者模式 可以大概如下这样：比如我们文章顶部提到的，装饰者模式原文中举例的 自行车商店案例，可以大概的原生js实现如下：  //自行车商店有两种类型的自行车，例如山地车、公路车。 然后自行车又有刹车、按铃、售后维修、等服务，对应的价格也会不同。我们要获取对应的报价  function Bicycle(){}  Bicycle.prototype.getPrice = function(){    return 1000;  }  function BicycleRailway(){}  BicycleRailway.prototype.price = 1500;  function BicycleMountain(){}  BicycleMountain.prototype.price = 1000;  // const BicycleShop = {  //   BicycleRailway,  //   BicycleMountain  // }  const DecoratorBell = function(){}  extends(DecoratorBell,Bicycle);  DecoratorBell.prototype.price = "
  },
  
  {
    "title": "对于框架的理解，框架和类库的区别",
    "url": "/posts/%E5%AF%B9%E4%BA%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E7%90%86%E8%A7%A3-%E6%A1%86%E6%9E%B6%E5%92%8C%E7%B1%BB%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/",
    "categories": "我的前端认知",
    "tags": "我的前端认知",
    "date": "2023-11-13 18:30:00 +0800",
    





    
    "snippet": "框架是一个实践的产物，而不是完全在实验室中理论研究出来的。所以设计一个框架最好的方法就是从一个具体的应用开始，以提供同一类型应用的通用解决方案为目标，不断地从具体应用中提炼、萃取框架！然后在应用中使用这个框架，并在使用的过程中不断地修正和完善我对前端开发中的 框架的理解架和类库等概念的出现都是源于人们对复用的渴望。〝不要重复发明轮子”，成了软件界的一句经典名言。从最初的单个函数源代码的复  ...",
    "content": "框架是一个实践的产物，而不是完全在实验室中理论研究出来的。所以设计一个框架最好的方法就是从一个具体的应用开始，以提供同一类型应用的通用解决方案为目标，不断地从具体应用中提炼、萃取框架！然后在应用中使用这个框架，并在使用的过程中不断地修正和完善我对前端开发中的 框架的理解架和类库等概念的出现都是源于人们对复用的渴望。〝不要重复发明轮子”，成了软件界的一句经典名言。从最初的单个函数源代码的复  用，到面向对象中类的复用（通常以类库的形式体现），再到组件的复用， 项目架构的复用。。 人们复用软件的抽象层次越来越高。现在，框架复用是抽象层次的又一提升，框架的复用不仅仅是功能的复用，更是设计的复用。1.框架和类库的区别我们先来简单说说什么是类库 (Class Library）？望文生义，类库就是一些类的集合，只要我们将一些可以复用的类集中放到一个？望文生义，类库就是Library中，我们就可以称其为一个类库。类库中的许多元素（如类、结构、接口、枚举、委托等） 之间可能有一些关联，但这些关联通常用于支持一个类概念或接口概念的完整表达。如果我们从一个更高的视角来申视类库，可以发现类库中的一个个〝完整的概念“之间是无关的或是关系松散的。 ----------- 再来说框架，框架的第一含义是一个骨架，它封装了某领域内处理流程的控制逻辑，所以我们经常说框架是一个半成品的应用。由于领域的种类是如此众多，  所以框架必须具有针对性，比如，专门用于解决底层通信的框架，或专门用于医疗领域的框架。  框架中也包含了很多元素，但是这些元素之间关系的紧密程度要远远大于类库中元素之间的关系。  框架中的所有元素都为了实现一个共同的目标而相互协作。没有一个万能的框架可以应用于所有种类的领域和应用，框架的目标性非常强，它专注于解决某一特定领域的问题，并致力于为这一特定领域提供通用的解决方案。框架与类库的区别主要表现在以下几个方面：  从结构上说，框架内部是高内聚的，而类库内部则是相对松散的。  框架封装了处理流程的控制逻辑，而类库几乎不涉及任何处理流程和控制逻辑。  正是由于框架对处理流程的控制逻铜进行了封装，才使得框架成为一个应用的骨架。框架中的处理流程和控制逻辑需要经过精心的设计，因为所有使用了该框架的应用程序都会复用该设计。2.框架的应用当一个应用系统选定了框架之后，我们需要做的就是在框架提供扩展点的地方 添加应用的具体逻辑，  也就是使用〝血“和〝肉“来填充这个骨架从而得到一个〝有机体”由于框架通常都是在实践中经过反复使用和检验的，所以质量有一定的保证，这使得我们用更少的时间、  更少的编码来实现一个更稳定的系统成为可能。当然，框架也不是〝银弹”，它不能解决软件复杂性的根本问题，但是我们却通过它向这个终极的理想目标又迈进了一步.    框架的实现逻辑,智能性,应用性  就和我们现在的ai人工智能的产品一样，它是尽可能按我们需要的目标去设计发展，      而不是能超级智能的可以应用的好多的场景中去。（业务开发和架构设计，一个是对代码的应用，开发出业务产品，另一个则更多的是在组件、项目、思想、类库架构的逻辑设计、逻辑开发中，是基于代码之上的逻辑开发，代码只是其实现的基础工具而已）   有一点需要注意，框架使得我们的系统在有所支撑的同时，它也给出了限制。因为通常当我们确定采用了某一个框架之后，我们就必须在这个框架限制的〝框框“之内来构建我们的应用。大多数时候，这不是一个问题，但是如果因为框架的限制而严重影响了我们系统目标的实现的时候，我们就需要考虑是否应该放弃这个框架，或者换一个其它的同类型的框架3.框架的设计框架使得我们开发应用的速度更快、质量更高、成本更低，这些好处是不言而喻的。  然而，面对万千变化日趋复杂的软件需求，设计和实现一个高度灵活可复用的框架又谈何容易！框架源于应用，却又高于应用。  框架往往是这样产生的：我们拥有了开发某种类型应用的大量经验，我们总结这种类型的应用中共性的东西，将其提炼到一个高的层次中，以备复用。这个〝高层次”的东西便是框架的原型。随着我们经验的不断积累，框架也会不断地完善、发展。框架是一个实践的产物，而不是在实验室中理论研究出来的。所以设计一个框架最好的方法就是从一个具体的应用开始，以提供同一类型应用的通用解决方案为目标，不断地从具体应用中提炼、萃取框架！然后在应用中使用这个框架，并在使用的过程中不断地修正和完善有一点需要特别注意，正如所有的软件架构设计的要点在于权衡 （在这方面有点像艺术），框架的设计也不例外，正如前面提到，框架在为应用提供了一个骨架的同时，也给我们的应用圈定了一个框框，我们只能在这个有限的天地内来发挥。所以，一个好的框架设计应当采用了一个非常恰当的权衡决策，以使框架在为我们应用提供强大支持的同时，而又对我们的应用作更少的限制。权衡，从来就不是一件简单的事情，但是有很多框架设计的经验可以供我们参考。1）框架不要为应用做过多的假设！关于框架为应用做过多的假设，一个非常具体的现象就是，框架越俎代庖，把本来是应用要做的事情揽过来自己做。这是一种典型的吃力不讨好的做法。框架越俎代庖，也许会使得某一个具体应用的开发变得简单，却会给其它更多想使用该框架的应用增加了本没有必要的束缚和负担，(封装抽离要适可而止，既要提高效能，又要防止过度耦合，臃肿，从而降低了应用性和可扩展性)当然从事前端架构工作，个人还是比较希望把全流程需要规范的地方，组件，工具代码，业务代码范本，都要规范统一，提升项目的工程化、标准化指数。2） 使用接口，保证框架提供的所有重要实现都是可以被替换的。框架终究不是应用，所以框架无法考虑所有应用的具体情况，保证所有重要的组件的实现都是可以被替换的，这一点非常重要，它使得应用可以根据当前的实际情况来替换掉框架提供的部分组件的默认实现。使用接口来定义框架中各个组件及组件间的联系，将提高框架的可复用性。3）框架应当简洁、一致、且目标集中。框架应当简洁，不要包含那些对框架目标来说无关紧要的东西，保证框架中的每个组件的存在都是为了支持框架目标的实现。包含过多无谓的元素（类、接口、枚举等），会使框架变得难以理解，尝试将这些对于框架核心目标不太重要的元素转移到类库中，可以使得框架更清晰、目标更集中。4）提供一个常用的骨架，但是不要固定骨架的结构，使骨架也是可以组装的。比如说，如果是针对某种业务处理的框架，那么框架不应该只提供一套不可变更的业务处理流程，而是应该将处理流程〝单步”化，使得各个步骤是可以重新组装的，如此一来，应用便可以根据实际情况来改变框架默认的处理流程。这种框架的可定制化能力可以极大地提高框架的可复用性5） 不断地重构框架。如果说设计和实现一个高质量的框架有什么秘诀？答案只有一个：重构、不断地重构。重构框架的实现代码、甚至重构框架的设计。重构的驱动力源于几个方面，比如对要解决的本质问题有了更清晰准备的认识，在使用框架的时候发现某些组件职费不明确、难以使用，框架的层次结构不够清晰等4 如何称得上一个优秀的框架？一个优秀框架的最主要的特点是：简单。这种简单性不是轻而易举就可以获得的，正如优秀的框架不是一蹴而就的，达到这种简单性需要对框架不断地抽丝、不断地提炼和完善。简单的真正原因在于它抓佳了要解决的问题的本质。一个优秀的框架通常都具有如下特点（1） 清晰的、简洁的、一致的。〝清晰“指的是框架的结构是清晰的、框架的层次是清晰明朗的、框架中各个类和组件的职责是清晰明确的。〝简洁“指的是框架中没有无关紧要多余的元素，而且各个类和组件的职责目标是非常集中的，这正是〝高内聚、低耩合“设计原则的体现〝一致“通常会带来这样的好处，框架的使用者在熟悉了框架的一部分后，会非常容易地理解框架的另一部分。〝一致“通常体现在命名的规则一致、命名的含义一致、组件的装配方式和使用方式一致等。  框架应该是易于使用的，把好多基础的逻辑代码进行封装抽离，使业务开发人员不用再花精力关注不该关注的代码逻辑。提高企业业务代码开发效率（2） 易于使用的只有易于使用的框架才会走得更远。正是因为易于使用，框架使用者们才有可能试用这个框架，在试用满意后才有可能决定采用这个框架。一个框架功能即使再强大，如果难以使用，那么框架使用者们很可能根本就不会有试用这个框架的念头，框架的生命力源于框架一直在不断地完善和发展，如果没有人使用这个框架，这个框架便没有了发展和完善的源动力。正如友好的用户界面是优秀应用程序不可或缺的重要部分，易于使用也是优秀框架的一个重要特性、（3） 高度可扩展的、灵活的框架通过高度可扩展性来应对应用程序的万千变化。没有任何一个框架可以预料所有应用的需求，万能的框架是不存在的。企图设计、实现一个万能框架的想法是荒诞的。框架必须具有〝以不变应万变^的基础性能力，框架可以通过为应用预留恰当的、足够的扩展点来做到这一点。框架的灵活体现在框架可以根据不同的应用进行不同的组装和配置，就像框架是专门为当前的应用所订制的一样。（4）轻量的〝轻量〞，说的通俗点，就是只为自己需要使用的服务付费，而不需要为自己不需要的服务买单。一个重量级的框架有一个很明显的特征就是，如果你需要一套完整的套餐服务，那是没有问题的，框架可以很好的满足你；但是，如果你只需要这份套餐中的一小块点心，对不起，框架仍然会强加一个完整的套餐给你，你必须付一整份套餐的费用。优秀的框架应当支持使用者〝按需所取“的原则，框架使用者可以随意〝点菜“进行组装来满足自己的需求(5）弱侵入性的所谓〝弱侵入性〞，采用了框架的应用程序可以尽可能的以普通的方式来编写应用逻辑，而不必为了适应框架不得不使用一些特殊的手法这可能有点难以理解，我们可以举个例子来简单说明。在.NET中，实现AOP（面向方面编程）机制的两种主要方式是使用Proxy和动态代理。使用Proxy实现的AOP框架通常要求那些需要使用AOP截获功能的类必须继承自ContexBoundObiject；而采用动态代理实现的AOP框架则没有任何如此侵入性的要求，我们仍可以以最普通的方式来编写应用逻辑类，这类框架会在运行时根据配置动态地生成目标对象的代理对象来实现AOP截获。所以我们可以说，采用动态代理方式实现的AOP框架相比采用Proxy实现的AOP框架，具有更弱的侵入性弱侵入性意味着框架对应用逻辑的干扰更少，由于应用逻辑类都是普通的类，这非常方便应用逻辑在另外一个程序中复用，而另外的程序可能采用了一个完全不同的框架，"
  },
  
  {
    "title": "我做前端leader的日常工作内容都做了什么",
    "url": "/posts/%E6%88%91%E5%81%9A%E5%89%8D%E7%AB%AFleader%E7%9A%84%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9%E9%83%BD%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/",
    "categories": "我的前端认知",
    "tags": "我的前端认知",
    "date": "2023-10-11 20:01:00 +0800",
    





    
    "snippet": "先前的经历就不讲了，从开始涉及到前端leader开始讲起哈转眼间已经单独在公司负责前端工作两年时间，在一家培训学校，有5个校区，负责学校的辅助运转项目落地，面向客户端项目落地等。由于公司之前没有纯前端开发，即还没有前后端分离，我进入该公司之后，公司的技术开始了前后端分离，那么，所有的前端工作，现在公司就只有我一个前端负责了，一个人应对了太多的技术挑战，  比如从0到1,从未接触过音视频方面开...",
    "content": "先前的经历就不讲了，从开始涉及到前端leader开始讲起哈转眼间已经单独在公司负责前端工作两年时间，在一家培训学校，有5个校区，负责学校的辅助运转项目落地，面向客户端项目落地等。由于公司之前没有纯前端开发，即还没有前后端分离，我进入该公司之后，公司的技术开始了前后端分离，那么，所有的前端工作，现在公司就只有我一个前端负责了，一个人应对了太多的技术挑战，  比如从0到1,从未接触过音视频方面开发开始，帮公司完成了在线课堂，直播，录播教育的开发；完成了小程序的开发；微信公众号h5的开发，to Customer,or to business;  帮公司完成了在线课堂办公系统开发，可供学生，老师，教务人员使用，同时该系统适配pc、ipad、移动端，涉及到了比较多的适配逻辑，多重逻辑的融合，系统可根据设备在无地址更换情况下切换项目场景。  帮公司开发了面向学生，家长，上课，教务相关的小程序开发，二开了ui组件等以上是我值得说的一家公司经历，说这些，只是为了讲明白，我后面为什么做那些前端leader,甚至更高到前端架构的事情，以及我为什么会有后面经历的原因，因为以上的实际境况，一个人不得不考虑到很多问题、事情、业务代码范式、组件公用性、架构、适配逻辑、部署等问题又转眼间，我已经在另外一家公司担任前端Leader工作已经有两年的光阴，真的，在一家公司待的时间，和技术成长是有一定的关系的，当你觉得没有什么长进，没有什么可以学习的时候，又坚持了一段时间后，会发现又有不一样的成长，这个成长是提升一个台阶的成长，是频繁跳槽获取不到的成长；这里记录一下我在这两年担任该职位时候的日常工作内容，这段时间抽空慢慢写，不急着一下写完哈。2023-10-11在我做前端leader两年期间，在刚进公司的时候，由于之前在一家公司单独负责前端工作的经历，在看了当前公司的基本项目代码之后，我感觉，这些项目代码，整体上是保留有一定的公司整体技术风向的。  逐渐的，在我接手了一个紧急的项目之后，发现公司处理整体层面的技术风向之后，技术执行细节上，代码复用性太低了，代码阅读性、直观性有点差了，代码的组件化有点缺乏大局观了，大多是低逻辑的组件，组件命名可读性有点差了，项目整体的技术可控性有点差了，都是开发人员自我发挥的，比较零散的，全局主题风格的样式需要一一去改动，去调节才能能保持一致；业务常用代码的封装有点少了，大都是把业务逻辑直接暴露到了项目主页面内容上面；主要项目与子项目，页面与子页面等的架构关系没有形成系统化、体系化、组件化、工程化、没有清晰的架构逻辑，没有清晰的全局架构思想。思想，在基础代码编程知识掌握之后，项目的架构思想，组件封装思想，业务demo抽离思想，全局掌控的思想变成了一个程序开发人员主要掌握的事情，是要具备的能力。组件的封装，需要看场景需要，它是一个常规的放之四海而皆准的组件还是只适用于当前自定义场景的组件，由此决定组件封装的思想高度，从而决定了组件封装时候各种参数的详细高度； 比如汽车有 轮子，方向盘，车架，这是一个抽象的思想；如果你理解为汽车的轮子、汽车的方向盘、汽车的车身，那就成了一个狭义的思想。组件封装的广度，宏观程度大体由此类似的思想形成了。除了思想，我们应明确的知道，组件的基本属性应该有，入参、响应、出参等基本要素，这些参数是泛型还是具体的定义，以及组件的使用初衷，决定的组件的宏观程度，使用场景。另外有时候，我们的组件，业务逻辑代码是相同的，我们只需要修改布局，我们要习惯于对业务代码和样式代码进行分离，代码逻辑分离，只用修改ui布局即可。  另外，代码通用的基本思想：抽离、封装、继承、多态，要使用贯穿到我们技术开发，技术架构的始终的。我在该公司这些分析判断之后，开始了我的工作：1 全局公用的，常用的业务组件进行封装，比如管理系统常用的 table组件，搜索条组件，form表单组件，弹窗组件，tab组件，日历组件，图标组件，文件上传、下载，对这些组件进行了 基于公司ui选型的截流，二次封装，并提供使用说明文档，并提供了相对应的使用代码范式， 因为ui组件的广度是比较大的，我们单纯使用它，每次都要花时间去看文档，了解它的各种属性，这对于开发人员是比较费时间的，我把上述组件二次封装成了符合本公司常用场景的业务组件，开发人员可以适当按照组件demo就能快速开发业务，不需要再去关注过多的配置，属性等。另外这些组件的封装，保证了项目的工程化实施，通过组件的控制，就可以把控项目全局的css样式、主题风格、业务demo范式2 对全局公用的基础样式、布局样式、自定义样式简称、色彩主题变量进行了全局抽离提取，控制了项目整体风格和样式的统一性、专业性3 对项目全局的 接口请求代码进行了逻辑和参数抽离，开发人员只用配置接口名字、接口路径、即可快速的注册接口、完成接口对接；同时接口的对接业务逻辑，进行了代码demo范式提供，让开发人员都能按照统一的代码编码范式去开发，省的每个人写不同的逻辑代码，提高了执行效率，降低了零散性。要对参数和业务代码、逻辑代码进行抽离，当然这些抽离的代码要作为一个可靠的范式，让大家方便使用，即便升级也要考虑不影响开发人员使用，它是开发环节的相对于开发人员的一个交付产品。4 对项目 基于代码开发整体上的各种工具代码进行抽离封装，比如：form表单校验、正则公式、上传、下载、空值处理、url地址处理，多环境识别等全局的公用数据、配置数据等，当然做以上所有的事情，都要有一个综合考量，考虑它的多项目复用，迁移等，所以我们的抽离，全局处理，并不是越多越好，有时候要方便代码迁移、代码复用等，不然的话，我们的迁移将会解决一大堆的文件，数据依赖等问题，过犹不及。5 开发各种有利于项目逻辑，降低工作繁杂的工具，脚本等。开发一键多项目打包脚本，shell脚本，git常规代码提交脚本，文件复制脚本，目录生成管理脚本，代码模板脚本6 对项目代码的目录结构进行调整，归类，整理，对于业务开发人员，只需要关注各自对应的业务开发就好，至于项目的整体架构、逻辑，我会对他们进行醒目的使用目录进行隔离，对业务开发页面也会使用目录进行归类隔离，这样，项目代码、文件结构就更清晰了，虽然都是前端开发，不同的角色负责的任务不同，专事专做，提高了项目代码的统一性，工程性，专业性。项目的整体的架构逻辑，贯穿到项目的始终的，也是另一种编程哦，编程的逻辑层级不同而已，要考虑适配、兼容、系统安全、交互体验、页面样式、公用组件产品化、性能、代码执行时序、这些不是能用就行的，我习惯性的想要找到最正确的解决思路，以及脚手架的二次封装整理等。这些都是编程哦，不是说写业务代码才叫开发。    （在我做前端leader的两年，技术经理是后端，技术主管是后端，在这样的公司，也只能适应环境。。但是当技术主管说：前端搭一个项目要不了两天时间，快的一天就够了呀，你怎么感觉进度有点慢了；我又不想反驳，但我也不会认可，以上的工作内容，实际摆在这里的，前端架构，前端leader工作一点不比后端轻松。工作量和复杂度都有的。我的开发，搭建都要全盘考虑的，复用考虑的，向最佳解决思路靠近的，同时要保证降低开发人员的难度，提高他们业务开发效率）7 我会习惯性的把业务和数据进行分离，数据和视图进行分离，组件和数据进行分离，最终只需要注入配置数据，接口字段，接口数据即可，环节节点，环节执行，只是已经封装抽离好的逻辑代码而已。数据在流畅的调用，注入，输出。比如我已经把项目的接口请求部分进一步抽离，需要对接口的时候，直接把接口路径，接口名字，一字符串的形式拼接，形成基础数据数组即可。    const baseApi = [      'apiName:apiPath:apiconfig',      'apiName:apiPath:apiconfig',      'apiName:apiPath:apiconfig',      // ...    ]    const genApi = (baseArr)=&gt;{      // return xxxx    }比如我已经把菜单部分进行数据抽离为：  const baseMenuData = [    'path-label',    {      sub:'path-label',      children:[        'path-label'      ]    }  ]  const genMenuData = (baseMenuData)=&gt;{    // return xxx  }除了以上的举例，还有常用的key-val 指标性数据、图表组件以及数据，表单数据，等地方，这样做的目的是减少开发人员业务开发的关注点，提高代码的可维护可读性，同时提高效率，因为我不用二次再关注逻辑了，只需要把对应数据添加进基础数据结构中即可。8 作为前端leader,除了以上工作，还有一个不能忽视的就是管理工作了，对于以上我对于项目做的整理和努力，要安利给组员使用的，目的就是提高开发效率，提高产出，降低繁杂的体力劳动，同时要对他们的代码进行 code review,因为他们有了问题解决不掉，还是要扔给我处理的，所以尽可能让他们保持良好的统一的编码习惯，降低不必要的消耗。同时，这是一个好的编码思想，他们应该也或多或少有点不一样的收获。前面说的都是项目具体实时细节的整体把控，我看当前公司的大多项目架构还行，但是细节实时欠佳，所以我做了以上的那些工作，为我在该公司的工作，管理提高效率。只有架构，没有细节逻辑，这个项目是不充实的，在进行了上面的工作之后，我又开始了 公司常用项目架构方面的工作：这一部分，在上一部分不经意间已经讲了一部分了。架构方面的工作，要看项目的性质的，难易程度也不尽相同，反正，如果公司项目需要往正规化、专业化发展，要做大做强的话，大概率是需要单独负责架构工作的人员的。不可能把业务开发工作和架构工作总是揉在一起。作为前端leader，我还要对开发成员进行尽可能合乎公司规则的绩效评定，个人觉得和对人员的面试逻辑类似的，这个是综合的考指标考量一起得出结果的，不单单是技术好，不单单是人缘好，不单单是上班不迟到等单方面决定的，而是要尽可能符合考核标准，尽可能有利于技术团队的发展、和谐、稳定最终做出的评定。  用一段时间，抽空看完一部分知识点，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。😀,2023-10-18"
  },
  
  {
    "title": "js设计模式-门面模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js设计模式",
    "date": "2023-09-19 19:30:00 +0800",
    





    
    "snippet": "门面模式在讲适配器模式的时候，我们和门面模式做了特别区分，现在讲门面模式时候，我们还要特别区分一下。他们的不同在于：  适配器模式是为了适配对接目标对象而设计使用的；  而门面模式是为了简化，整理，归类某一相关属性的代码、方法等，我们统一抽离/封装/归类到了同一处地方的这么一个过程，形成的这么一种对象形式，是一种封装之后的简化，门面模式就是要把那些统筹层面的常用的，实现比较复杂繁琐的方法、处...",
    "content": "门面模式在讲适配器模式的时候，我们和门面模式做了特别区分，现在讲门面模式时候，我们还要特别区分一下。他们的不同在于：  适配器模式是为了适配对接目标对象而设计使用的；  而门面模式是为了简化，整理，归类某一相关属性的代码、方法等，我们统一抽离/封装/归类到了同一处地方的这么一个过程，形成的这么一种对象形式，是一种封装之后的简化，门面模式就是要把那些统筹层面的常用的，实现比较复杂繁琐的方法、处理流程等归类到合适的对象上，让开发人员不必每次使用再单独去执行其详细实现算法和思维。比如我们项目中经常使用到的 utils 文件：const util = {  validatorHandlers: {    verifyPhone: () =&gt; {},    verifyEmail: () =&gt; {}    // ...  },  numberEmptyHandle: () =&gt; {},  upload: () =&gt; {    // ...  },  downloadFile: () =&gt; {}  // 等等....};我们不再去关注其每个功能的具体实现方法，根据语义，直接调用方法即可。 比如早期浏览器，各个浏览器的事件监听，冒泡，阻止等使用方法也不相同， 我们每次使用到对应功能，都要把代码重新写一遍，这样工作效率很受阻var DED = window. DED || {}:DED.util={stopPropagation: function(e) {  if (e.stopPropagation){    // W3 interface    e.stopPropagation();  }else {    // IE's interface    e.cancelBubble = true;  }},preventDefault: function(e) {  if (e.preventDefault){    / W3 interface    e.preventDefault();  }else {    // IE's interface    e.returnValue-false;  }}/* our convenience method */stoptvent: function(e) {  DED.util.stopPropagation(e);  DED.util.preventDefault(e);}门面模式使用场合上面已经讲过了，在一些经常使用，实现繁琐复杂，应用场景经典出现的地方，使用的一些方法，代码都可以做门面模式封装3. 适配器模式之利门面模式提供了各种的基础开发方法，代码实现，代码抽离，可以让程序员开发更轻松高效一些4. 适配器模式之弊门面模式也要注意分类规划，不应在一个对象中堆叠太多的元素方法等，仿佛编程了一个这类东西的库，  每个项目使用就得引入，到一定程度时候，也算比较大的文件了，应该控制这个度量我的读后感；门面方式已经在代码开发中不经意的有在使用中，这里的理念算是一次特意的提醒,提亮技术专业度。"
  },
  
  {
    "title": "js设计模式-适配器模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js设计模式",
    "date": "2023-08-22 23:30:00 +0800",
    





    
    "snippet": "适配器模式  —情人节哦-情人节 🐣🌹先讲一下适配器，我们浏览器搜索可以知道该词的具体含义。适配器是一个接口转换器;它可以是一个独立的硬件接口设备，允许硬件或电子接口与其它硬件或电子接口相连;也可以是信息接口。比如：电源适配器、三角架基座转接部件、USB与串口的转接设备等;在计算机硬件中，可以理解为两种设备的连接处，为了实现某种连通目的而实现的。1. javascript的设计模式-适配器模...",
    "content": "适配器模式  —情人节哦-情人节 🐣🌹先讲一下适配器，我们浏览器搜索可以知道该词的具体含义。适配器是一个接口转换器;它可以是一个独立的硬件接口设备，允许硬件或电子接口与其它硬件或电子接口相连;也可以是信息接口。比如：电源适配器、三角架基座转接部件、USB与串口的转接设备等;在计算机硬件中，可以理解为两种设备的连接处，为了实现某种连通目的而实现的。1. javascript的设计模式-适配器模式也是借鉴此理念模式，基于代码开发层面的总结。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。适配器可以被添加到现有代码中以协调两个不同的接口。如果现有代码的接口能很好地满足需要，那就可能没有必要使用适配器。但要是现有接口对于手头的工作来说不够直观或实用，那么可以使用适配器来提供一个更简洁或更丰富 （option-rich）的接口。适配器可被实现为不兼容的方法调用之间的一个代码薄层。2. 一个比较基本的适配案例如下如果你有一个具有3个字符串参数的函数，但客户系统拥有的却是一个包含三个字符串元素的数组，此时就可以用一个适配器来衔接二者。假设你有一个对象，还有一个以三个字符串为参数的两数,如下：var clientobiect ={  string1:\"foo\",  string2: 'bar',  string3: 'baz',};function interfaceMethod(str1, str2, str3) {  // ...}为了把clientobject作为参数传递给 interfacevethod，需要用到适配器。我们可以这样创建一个适配器：function clientToInterfaceAdapter(o){  interfaceMethod(o.string1, o.string2, o.string3);}// 现在就可以把整个对象传递给这个函数：clientToInterfaceAdapter(clientObject);  这个可能我们日常开发中已经基本很好的用到了，从 js设计模式的内容来看，后面列举了三五个不用的方法，以捍卫该模式，然后列举出了使用适配器的场景，以及利弊。      2.2另外一个实际应用中比较常见的案例如下：    假如一个项目需要用到另外一个项目的 代码方法，比如我们要使用到api相关的。但是他的好多变量需要改，这时候， 我们最好的做法是 适配这个变量，而不是替换这个变量。   let baseUrl = {  devUrl:'' }  export const obj = {    a:baseUrl.devUrl+'/xx/xx',    b:baseUrl.devUrl+'/xx/xx',  }  // 如上这段代码，我们要替换 a,b元素中的baseUrl.devUrl变量改动会比较多的，  // 我们不如设置 给 baseUrl.devUrl复值待对接适配的变量值更好  import newDevelopmentUrl from 'xx'  let baseUrl = {    devUrl:newDevelopmentUrl  }  // ....  // 这样我们就不需要替换obj对象中各个元素的baseUrl.devUrl 字段了  3. 适配器模式之利适配器有助于避免大规模改写现有客户代码。其工作机制是：用一个新的接口对现有类的接口进行包装，这样容户程序就能使用这个并非为其量身打造的类而又毋需为此大动手术。  4. 适配器模式之弊可能有些工程师不想使用适配器，其原因主要在于他们实际上需要彻底重写代码。  有人认为适配器是一种不必要的开销，完全可以通过重写现有代码避免。  此外适配器模式也会引入一批需要支持的新工具。如果现有API还未定形，或者新接口还末定形（这更有可能），  那么适配器可能不会一直管用。在设计键盘的硬件工程师创造PS2-t0-USB适配器这个案例中，成千上万的键盘上面的PS2插头不会再有什么变化，而USB接口则成了新的标准，所以这种适配器才有意义。但是在软件开发这一行中，情况并非总是如此。我的读后感；适配器方式已经在代码开发中不经意的有在使用中，我们可能已经在潜移默化中，  在考虑代码结构，可用性的时候，已经不经意的使用了，这里的理念算是一次特意的提醒,提亮技术专业度。  平常适配器不需要刻意去使用，在某些场景遇到了综合考虑之后顺其自然的适当使用即可。"
  },
  
  {
    "title": "js知识点-function、arguments、callee、caller的回顾理解.",
    "url": "/posts/js%E7%9F%A5%E8%AF%86%E7%82%B9-function-arguments-callee-caller%E7%9A%84%E5%9B%9E%E9%A1%BE%E7%90%86%E8%A7%A3/",
    "categories": "js基础知识",
    "tags": "js基础知识",
    "date": "2023-08-17 00:41:00 +0800",
    





    
    "snippet": "  用一段时间，抽空看完一部分知识点，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。😀,js 函数中提供的三个相关参数，平常几乎用不到，但是在看某些源码时候，还是会遇到，再次温顾记录一下，提高认知。巩固自己的编码掌控能力。  先说 arguments,原先的两种写法，[functionName].arguments 已经废弃了,部分浏览器已经不用了，干脆都不要用了；现在我们可以在函数...",
    "content": "  用一段时间，抽空看完一部分知识点，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。😀,js 函数中提供的三个相关参数，平常几乎用不到，但是在看某些源码时候，还是会遇到，再次温顾记录一下，提高认知。巩固自己的编码掌控能力。  先说 arguments,原先的两种写法，[functionName].arguments 已经废弃了,部分浏览器已经不用了，干脆都不要用了；现在我们可以在函数内部直接使用 arguments 访问，function xiangchuifeng(a, b, c) {  console.log(    xiangchuifeng.arguments,    arguments,    typeof arguments,    Array.from(arguments)  );}xiangchuifeng(1, 2, 3);测试输出如下图：通过测试我们可以知道，arguments 是一个类数组，并且含有 callee 属性。获取函数的参数 我们也可以使用 es6 的 … 操作符号function b(...args) {  console.log(args);}b(1, 2, 3); //[1,2,3]  callee属性,是当前函数的引用，是正在被执行的函数本身，比如匿名函数可以使用该属性实现递归调用。  function diGui(n){    if(n&gt;10){      n=n-1;      console.log(n,'digui')      arguments.callee(n)    }else{      console.log(n)      return n    }  }  caller：在一个函数调用另外一个函数时候，被调用函数会自动生成caller属性，指向调用它的函数对象。如果当前被调用函数，未被调用，或者未被其他函数调用，比如单独执行，这时候的caller返回为null;而arguments.callee.caller 意义和 ttCaller.caller 差不多了。以上就是对于该处js知识点的再回顾，平常用的不是很多，在一些js插件 框架 工具等源码中可能会涉及到，了解此知识点有利于阅读。"
  },
  
  {
    "title": "git reset和git revert的区别",
    "url": "/posts/git-reset-%E5%92%8C-git-revert%E7%9A%84%E5%8C%BA%E5%88%AB/",
    "categories": "git操作问题记录",
    "tags": "reset和revert区别",
    "date": "2023-08-12 17:40:00 +0800",
    





    
    "snippet": "  用一段时间，抽空看完一部分知识点，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。😀,在利用git版本管理工具时候，我们有时会出现错误提交的情况（当然我们要有良好的操作习惯，避免这种不当的操作发生，实在发生之后，我们再这样去解决），此时我们希望能撒销提交操作，让程序回到提交前的样子，本文总结了两种解决方法：回退 (reset)、反做 ( revert)下面是 git的版本管理，及H...",
    "content": "  用一段时间，抽空看完一部分知识点，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。😀,在利用git版本管理工具时候，我们有时会出现错误提交的情况（当然我们要有良好的操作习惯，避免这种不当的操作发生，实在发生之后，我们再这样去解决），此时我们希望能撒销提交操作，让程序回到提交前的样子，本文总结了两种解决方法：回退 (reset)、反做 ( revert)下面是 git的版本管理，及HEAD的理解使用git的每次提交，Git都会自动把它们串成一条时间线，这条时间线就是一个分支。如果没有新建分支，那么只有一条时间线，即只有-个分支，在Gt里，这个分支叫主分支，即master分支。有一个HEAD指针指向当前分支（只有一个分支的情况下会指向master，而master是指向最新提交）。每个版本都会有自己的版本信息，如特有的版本号、版本名等。如下图，假设只有一个分支：下面讲一下 git reset 与 git revert 的区别git reset 的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本一reset 之后，目标版本之后的版本不见了可以知道，git reset之后，回到之前的版本之后，之后所有的版本都不要了，而相反，git revert 只是回退了目标版本，但是后面做的版本还会保留着，git reset 操作如下：执行命令 git log， 查看提交日志，找到要回退的版本号执行命令 git reset –hard 目标版本号; 将版本回退；版本号回退之后，git log再看 HEAD已经到目标分支上；这种版本回退之后，一般 git push 会报错，因为我们本地库已经回退到比远程库更旧的版本。所以我们要 “git push -f” 强制推上去就好了。下面讲一下 git revertgit revert 是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本-、版本二、版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撒销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。如下图所示：那么具体实现方法是：使用 ”git revert -n 版本号“ 还原，如果文件出现冲突，手动解决即可，然后 ”git add 文件名“ ，然后 “git commit -m 注释或者版本名” 然后 git push 推送到远程仓库即可。注意，两者区别是，git reset是回退版本，该版本后面做的都没有了，git revert 是还原某一个版本的改动，但该版本后面的其他版本的改动依然保留"
  },
  
  {
    "title": "vue好用的table组件",
    "url": "/posts/vue%E5%A5%BD%E7%94%A8%E7%9A%84table%E7%BB%84%E4%BB%B6/",
    "categories": "vue",
    "tags": "组件, vue3组件",
    "date": "2023-06-25 00:41:00 +0800",
    





    
    "snippet": "在日常的开发中，我们总是重复的做重复的工作，比如我们做管理后台页面的列表页，我们每个项目都是用基于所选的ui组件去开发，每次都是用对应组件的api,虽然挺好，但是对于我来说，总感觉不是自己的东西，有点虚无缥缈的，感觉下一个项目，下一个需求再使用它就要重新熟悉一遍它的功能和使用方法，或者要把以前的冗长的代码copy过来使用，  这不是一个良好的习惯，我的个人习惯里，总是要对拿来的ui组件，比较...",
    "content": "在日常的开发中，我们总是重复的做重复的工作，比如我们做管理后台页面的列表页，我们每个项目都是用基于所选的ui组件去开发，每次都是用对应组件的api,虽然挺好，但是对于我来说，总感觉不是自己的东西，有点虚无缥缈的，感觉下一个项目，下一个需求再使用它就要重新熟悉一遍它的功能和使用方法，或者要把以前的冗长的代码copy过来使用，  这不是一个良好的习惯，我的个人习惯里，总是要对拿来的ui组件，比较基础性的、常用性的组件进行符合自己开发习惯的，或者认为是最好解决方案的二次开发封装，这样我能把常用的业务场景，以及和页面布局，其他组件的搭配使用相结合起来，代码进行了抽离，再次有业务需要时候，使用起来会更简单，更高效，我认为这是一个好的习惯      由于本人日常使用的前端技术栈以vue为核心，由于naive-ui被尤大仁的极力推荐，本人已经使用该ui框架将近2年，从一开始使用，就像vue2时代一样，开始了组件的基于实际生产的二次开发，经过长久时间的丰富完善，二次封装开发的 rong-table 组件 已经基本能使用于98%的列表业务场景，包括良好的场景布局方案，大大的提高了 开发的效率，降低了列表模块的开发代码繁杂程度，降低了代码量，如果你使用了naive-ui,这个可以帮你大大的解放该部分的开发时间        在日常开发环境中，我们常用到富文本编辑器，在实际业务中，富文本上传图片，如果不是长传到云存储，如果只是通过表单接口传递，这时候，如果图片被转为base64字符串，并提交接口的话，一个图片过大，表单接口提交的内容过大，1MB 3MB 5MB ..,接口请求会卡死的，或者接口会拦截，表单提交失败的，网上普遍的富文本 这个问题解决的不是非常经典完整，比如识别粘贴事件上传，这样会把文本内容也当图片上传了。或者把文本内容屏蔽掉了，这是不行的，本人经过妥善构思，现在可以使用函数 html-base64-img-to-upload 在表单提交时候检测对应字段，如果是base64格式的，如果长度大于使用设定的长度参数，则会把这个base64图片自动上传到设定的存储接口上，promise返回上传后的图片地址，避免在表单里面提交，另外，富文本一般会有新手测试提各种奇怪的bug,比较常见的是一个 富文本长度问题，这个我的做法 一般是不做长度限制的，从生产上来说实现不是很理想。。    在个人的看法里。vue,react 只是同一维度的两个竞争的js框架，一般应用场景96%的业务场景，彼此都能很好的解决，只需要把一门学好就行了，人的精力有限的，一个js框架是那么多技术大哥一起努力的产物，对于开发学习者，一个人的智慧力量和专注力是适当有限的，还是专人专事比较好，实际应用中来回切换这两个，可能精力会不够，也就用的不够到精髓，等用到了深处时候会发现框架和js是交互共生的，框架只是一种环境、开发范式、理念。一个vue3是有大概99位技术大哥，将近3000次代码提交，历时2年多时间才开发出来的，而且还借鉴对比于vue2、react、angular。未来的日子里，我也讲适当把vue3的源码读后感记录一下。学习要做笔记，不然学的不深。"
  },
  
  {
    "title": "js设计模式-享元模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js设计模式",
    "date": "2023-06-13 11:17:00 +0800",
    





    
    "snippet": "享元模式  “享元”,被共享的单元,即复用对象,节省内存,注意前提是享元对象是不可变对象。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。个人感觉这个享元模式，初步看上去，大概可以理解为一种写代码的良好习惯，性能优化、去掉冗余，在代码开发时候，要避免影响性能的不良习惯。简单概括就是 dom 创建加载，变量，缓存，代码重用 等等能节省代码...",
    "content": "享元模式  “享元”,被共享的单元,即复用对象,节省内存,注意前提是享元对象是不可变对象。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。个人感觉这个享元模式，初步看上去，大概可以理解为一种写代码的良好习惯，性能优化、去掉冗余，在代码开发时候，要避免影响性能的不良习惯。简单概括就是 dom 创建加载，变量，缓存，代码重用 等等能节省代码执行开支的地方就去优化，去节省。在编程语言中共有的的理念即：抽离，封装，继承，多态，享元模式也蕴藏了此理念。享元模式的基本概念：享元是一种结构型设计模式，它允许你在消耗少量内存的情况下支持大量对象。模式通过共享多个对象的部分状态来实现上述功能。换句话来说，享元会将不同对象的相同数据进行缓存以节省内存用一个简单的例子，我们看一下，找找感觉，这个设计模式 很基础，甚至感觉是一种开发理念。// 未经优化的 tooltip 类let Tooltip = function (targetElement, text) {  this.target = targetElement;  this.text = text;  this.delayTimeout = null;  this.delay = 1500;  // create the HTML  this.element = document.createElement(\"div\");  this.element.style.display = \"none\";  this.element.style.position = \"absolute\";  this.element.className = \"tooltip\";  document.getElementsByTagName(\"body\")[0].appendChild(this.element);  // attach the event  var that = this;  addEvent(this.target, \"mouseover\", function (e) {    that.startDelay(e);  });  addEvent(this.target, \"mouseout\", function (e) {    that.hide();  });};Tooltip.prototype = {  startDelay: function (e) {    if (this.delayTimeout == null) {      let that = this;      let x = e.clientX;      let y = e.clientY;      this.delayTimeout = setTimeout(function () {        this.show();      }, this.delay);    }  },  show: function (x, y) {    clearTimeout(this.delayTimeout);    this.delayTimeout = null;    this.element.style.left = x + \"px\";    this.element.style.top = y + 20 + \"px\";    this.element.style.display = \"block\";  },  hide: function () {    clearTimeout(this.delayTimeout);    this.delayTimeout = null;    this.element.style.display = \"none\";  }};  上述的这段代码，意味着，我们每每使用到一个提示，就需要创建一个提示 dom 元素，那一个项目操作下来，多少个都有可能，几百几千个的话，是不是会有点崩溃的，性能会很差，浏览器开销会很大。从良好的开发习惯上来讲，这个肯定要优化的，要把示例抽离，只创建一个 提示 dom,在需要的时候，控制展示不同的内容就好了。所以基础单元，要和数据单元进行分离。在实际应用中，这个唯一创建的提示 dom 这个逻辑，这个行为，就是享元，共享单元。 而我们需要用的动态数据变量，需要抽离出来单独处理，平常代码开发，我们经常提到的，代码功能独立性，就像积木，就像电子元器件，开发思想的重要性。下面我们看一下，设计模式-享元模式对上面这段案例的处理：// managerlet TooltipManager = (function () {  let storeInstance = null;  let Tooltip = function () {    this.delayTimeout = null;    this.delay = 1500;    // create the HTML    this.element = document.createElement(\"div\");    this.element.style.display = \"none\";    this.element.style.position = \"absolute\";    this.element.className = \"tooltip\";    document.getElementsByTagName(\"body\")[0].appendChild(this.element);  };  Tooltip.prototype = {    startDelay: function (e) {      if (this.delayTimeout == null) {        let that = this;        let x = e.clientX;        let y = e.clientY;        this.delayTimeout = setTimeout(function () {          this.show(x, y, text);        }, this.delay);      }    },    show: function (x, y, text) {      clearTimeout(this.delayTimeout);      this.delayTimeout = null;      this.element.innerHTML = text;      this.element.style.left = x + \"px\";      this.element.style.top = y + 20 + \"px\";      this.element.style.display = \"block\";    },    hide: function () {      clearTimeout(this.delayTimeout);      this.delayTimeout = null;      this.element.style.display = \"none\";    }  };  return {    addTooltip: function (targetElement, text) {      let tt = this.getTooltip();      addEvent(targetElement, \"mouseover\", function (e) {        tt.startDelay(e, text);      });      addEvent(targetElement, \"mouseout\", function (e) {        tt.hide();      });    },    getTooltip: function () {      if (storeInstance == null) {        storeInstance = new Tooltip();      }      return storeInstance;    }  };})();上面这个Tooltip类和未处理前做一个对比，去进一步了解享元模式。"
  },
  
  {
    "title": "前端常用的地图框架",
    "url": "/posts/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%A1%86%E6%9E%B6/",
    "categories": "gis地图相关",
    "tags": "gis",
    "date": "2023-06-11 01:04:00 +0800",
    





    
    "snippet": "前端常用的地图框架（webGIS）      LeafletLeaflet 是最著名的前端地图可视化库，它开源、体积小、结构清晰、简单易用。        Mapbox GL JSMapbox GL JS 是目前最新潮的前端地图库，它的矢量压缩、动态样式和三维性能令人印象深刻。它本身是开源的，但一般依赖于Mapbox公司提供的底图服务。        ArcGIS API for JSArc...",
    "content": "前端常用的地图框架（webGIS）      LeafletLeaflet 是最著名的前端地图可视化库，它开源、体积小、结构清晰、简单易用。        Mapbox GL JSMapbox GL JS 是目前最新潮的前端地图库，它的矢量压缩、动态样式和三维性能令人印象深刻。它本身是开源的，但一般依赖于Mapbox公司提供的底图服务。        ArcGIS API for JSArcGIS API for JS 是较为学院派的前端地图库，它是ArcGIS开发套件中的一部分，和桌面端和服务器端ArcGIS软件有较好的协作。它不开源且收费不低，在学术场景下较为常用。        OpenlayersOpenlayers 也是常用的前端地图库，它开源，相比于Leaflet更加复杂和完备。        CesiumCesium 是三维地理可视化的常用库，在大尺度的可视化（地形、建筑、地球）中十分常用。        百度地图 JS API /百度地图 API GL百度地图 JS API 是传统的二维地图，百度地图 API GL 是三维地图，它们依赖百度地图提供的后台服务。除了地图服务外还有检索、导航、实时交通等关联服务。开发者有免费的限额。        高德地图 JS API高德地图 JS API 与百度类似。        Google Maps JS API谷歌地图 JS API 在境外有更好的数据。        AntV L7AntV L7 是空间数据可视化库，它可以使用高德地图等协作构建地图可视化。        Mapbox.jsMapbox.js 是 Leaflet 的一个扩展插件（与 Mapbox GL JS 不同）。  "
  },
  
  {
    "title": "AIGC的概念，和chatgpt有什么关联？",
    "url": "/posts/AIGC%E7%9A%84%E6%A6%82%E5%BF%B5-%E5%92%8Cchatgpt%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E8%81%94/",
    "categories": "技术前沿, AIGC, ChatGpt",
    "tags": "AIGC",
    "date": "2023-06-06 09:47:00 +0800",
    





    
    "snippet": "AIGC 和 ChatGPT 是两个不同的概念，但是有一定的联系和关联.AIGC 是 AI Generate Content 的意思，意味着人工智能生成的内容。AIGC 是一种利用人工智能技术自动化地生成各种类型的内容的方式，例如文本、音频、图像、视频等。  AIGC 可以应用在多个领域和场景，例如网络营销、品牌宣传、产品介绍、自动化客服、自动化翻译、自动化作曲等等  AIGC 的优点是可以...",
    "content": "AIGC 和 ChatGPT 是两个不同的概念，但是有一定的联系和关联.AIGC 是 AI Generate Content 的意思，意味着人工智能生成的内容。AIGC 是一种利用人工智能技术自动化地生成各种类型的内容的方式，例如文本、音频、图像、视频等。  AIGC 可以应用在多个领域和场景，例如网络营销、品牌宣传、产品介绍、自动化客服、自动化翻译、自动化作曲等等  AIGC 的优点是可以大量且快速地生成高质量的内容，节省时间和人力，提高效率和精确度  AIGC 智能生成的图片，体现了一种科学美，技术美不过，它也有一些缺点，首先比较明显的是，它会不会带来创作内容的产权问题，图片内容的产权问题等，其次，它生成的内容可能会比较缺少人情味，缺少一些灵动美。下面可以概览一些 AIGC 图片：一艘游轮行驶在波涛汹涌的陆地上 彩色斑斓朦胧未来的空间站程序员粉红色的独角兽 和月亮一起💈💈💈💈💈💈💈ChatGPT 是由 OpenAI 开发的一种基于 Transformer 的语言模型，–可以进行语言理解和生成，提供更接近人类和高效的沟通和表达方式ChatGPT 可以在各种情境下进行应用，例如网络聊天、语音助理、自然语言处理等等它可以不断的学习和进化，丰富自己的内容储量，生成更接近人类需要的内容，就像一个学习成长的小孩，ChatGPT 是 AIGC 的一种具体的应用和产品，属于文本生成的范畴ChatGPT 的优点是可以生成流畅且有逻辑的文本，可以与用户进行自然且有趣的对话，可以优化负面结果，例如提问“如何闯空门”，机器会回答“这并不合适”。ChatGPT 的缺点和上面 AIGC 的有部分类似，可能生成内容还比较生硬，比较举例化，不能应用于实际项目。或者生成不正确或不合适的文本，需要人类反馈来强化学习，还需要不断的学习融合。      AIGC 是一个广泛的概念，包括多种类型的内容生成；ChatGPT 是一个具体的产品，只涉及文本生成。        AIGC 可以应用在多个领域和场景；ChatGPT 主要应用在语言相关的领域和场景。        AIGC 可能需要不同的技术和模型来实现；ChatGPT 使用了 Transformer 作为核心技术和模型  "
  },
  
  {
    "title": "naive-ui中Anchor点击侧边栏锚点时候却跳转新页面的解决",
    "url": "/posts/naive-ui%E4%B8%ADAnchor%E7%82%B9%E5%87%BB%E9%94%9A%E7%82%B9%E6%97%B6%E5%80%99%E5%8D%B4%E8%B7%B3%E8%BD%AC%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3/",
    "categories": "ui组件库问题解决, naive-ui",
    "tags": "ui组件库问题",
    "date": "2023-05-22 10:26:00 +0800",
    





    
    "snippet": "naive-ui中Anchor点击侧边栏导航锚点跳转，却是新页面的问题；最近开发过程用 有使用锚点定位跳转的功能，于是使用了naive-ui的Anchor组件，组件demo代码 套用到项目上的时候，右侧内容滚动时候，侧边栏的锚点会自动高亮，这个是没有问题的，然后问题来了，点击左边锚点时候，右边的页面不会定向到对应位置，而是跳转了新页面，因为vue-router路由模式把锚点定位理解成了新页面...",
    "content": "naive-ui中Anchor点击侧边栏导航锚点跳转，却是新页面的问题；最近开发过程用 有使用锚点定位跳转的功能，于是使用了naive-ui的Anchor组件，组件demo代码 套用到项目上的时候，右侧内容滚动时候，侧边栏的锚点会自动高亮，这个是没有问题的，然后问题来了，点击左边锚点时候，右边的页面不会定向到对应位置，而是跳转了新页面，因为vue-router路由模式把锚点定位理解成了新页面的跳转。再回头看了一下 naive-ui组件说明，它是提供的有组件方法的，scrollTo,但是点击事件直接是默认的组件里面的a链接跳转，跳珠到了新页面。终于在思考了片刻之后，想到组件上使用点击事件加vue指令的修饰符应该是可以解决的。于是最终解决方案如下：&lt;n-anchor  ref=\"anchorRef\"  :show-rail=\"showRail\"  :show-background=\"showBackground\"  :bound=\"0\"  :offset-target=\"'.inner_page_bg.portrait .right'\"&gt;  &lt;n-anchor-link    v-for=\"(item, i) in anchorList\"    :title=\"item.split('-')[0]\"    :href=\"'#d' + (i + 1)\"    :class=\"item.split('-')[1] == 'later' ? 'disable_anchor' : ''\"    @click.capture.prevent=\"item.split('-')[1] == 'later' ? scrollTo(i + 1) : ''\"  /&gt;&lt;/n-anchor&gt;使用修饰符 capture设置捕获模式，prevent禁止捕获，最终点击事件止步于组件的外壳上，然后传参，使用scrollTo 滚动调位到对应的锚点@click.capture.prevent=”item.split(‘-‘)[1] == ‘later’ ? scrollTo(i + 1) : ‘’” const anchorRef = ref(null);  const scrollTo = (num) =&gt; {    anchorRef.value?.scrollTo(\"#d\" + num);  };那么这个问题就解决了,"
  },
  
  {
    "title": "js设计模式-方法的链式调用",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%96%B9%E6%B3%95%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/",
    "categories": "js设计模式理解",
    "tags": "js基础知识, js设计模式",
    "date": "2023-05-12 17:02:00 +0800",
    





    
    "snippet": "链式调用链式调用是简单来讲就是 一个对象/主体 调用的方法，可以返回主体本身，可以接着去访问主体的下一个方法或者操作 ,它是一种语法招数。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。// 大概这个意思function b(dataIn) {  // ...  return dataIn;}链式调用可以让代码的可读性更好，代码结构更清...",
    "content": "链式调用链式调用是简单来讲就是 一个对象/主体 调用的方法，可以返回主体本身，可以接着去访问主体的下一个方法或者操作 ,它是一种语法招数。  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。// 大概这个意思function b(dataIn) {  // ...  return dataIn;}链式调用可以让代码的可读性更好，代码结构更清晰，易读， 减少了代码量。如下所示对比：  baby.read();  baby.write();  baby.eatFood();  baby.sleep();  baby.read().write().eatFood().sleep()......a.b().c()比如我们以前用的 jquery.js,就是用的链式调用。$(\"div\").mouseover(function () {  $(this).css(\"color\", \"red\");});jquery 中的 $(‘element’)实现代码如下：function $(){  var elements = [];  for(var i=0;len=arguments.length;i&lt;len;++i){    var element = arguments[i];    if(typeof element==='string'){      element = document.getElementById(element)    }    if(arguments.lenth==1){      return element;    }    elements.push(element);  }  return elements;}$('element').each = function(){  // xxxx  return this;}那么，我们 jquery 中的 方法，show,each 等方法，也是在其构造器内实现的(function(){  function _$(els){    var elements = [];    for(var i=0;len=arguments.length;i&lt;len;++i){      var element = arguments[i];      if(typeof element==='string'){        element = document.getElementById(element)      }      if(arguments.lenth==1){        return element;      }      elements.push(element);    }    return elements;  }  _$.prototype = {    show:function(){      vat that = this;      this.each(function(el){      that.setStyle('display','block')      })      return this;    },    each:function(fn){      for(var i=0;len = this.elements.length;i&lt;len;i++){        fn.call(this,this.elements[i]);      }      return this;    },    setStyle:function(prop,val){      this.each(function(el){        el.style[prop] = val;      })      return this;    }  }  window.$ = function(){    return new _$(arguments)  }})()以上就是链式调用方法。未来我们接着开始理解设计模式中的 工厂模式"
  },
  
  {
    "title": "js设计模式-单体模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BD%93%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js基础知识, js设计模式",
    "date": "2023-05-11 11:49:00 +0800",
    





    
    "snippet": "单体模式,也叫单例模式单体（singleton）模式是 javascript 中最基本但又最有用的模式之一，这种模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一的变最进行访问。通过确保单体对象只存在一份实例，你就可以确信自己的所有代码使用的都是同样的全局资源.借助于单体模式，你可以把代码组织得更为一致，从而使其更容易阅读和维护。这种模式在 JavaScript ...",
    "content": "单体模式,也叫单例模式单体（singleton）模式是 javascript 中最基本但又最有用的模式之一，这种模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一的变最进行访问。通过确保单体对象只存在一份实例，你就可以确信自己的所有代码使用的都是同样的全局资源.借助于单体模式，你可以把代码组织得更为一致，从而使其更容易阅读和维护。这种模式在 JavaScript 中非常重要，也许比在其他任何语言中都更重要。在网页上使用全局变量有很大的风险，而用单体对象创建的命名空间则是清除这些全局变量的最佳手段之一，他们可以划分命名空间，清除减少全局的变量数目，  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。一个比较基本的单体结构如下const singleton = {  attribute1: true,  attribute2: 10,  method1: function () {},  method2: function () {}};在通用的编程开发中单体模式单体是一个只能被实例化一次并且对象访问点 . 访问的类。如果按照这个意义来说，上面这个基本结构就算不上是一个单体，因为它不是一个可以实例化的类。在 js 设计模式中，我们给它的定义，显得更广义一点，上面的也算是单体。即：单体是一个用来划分命名空间并将已批相关方法和属性组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。  对象字面量只是创建单体的一种方法，并非所有的对象字面量都是单体，如果它用来模仿关联数组或者容纳数据的话，那就显然不是单体，但是用过它是组织一些相关的属性和方法，那就可能是单体，这个取决于设计者的意图。划分命名空间命名空间，其实就是上面那个基础例子的 变量名 singleton，/* use a namespace */var myNamespace = {function1:function(id){}// ...}1.内部的成员方法不会被全局命名空间中声明的变量所改写。2.其他程序员在使用此方法时候，通过 namespace.function 去调用，大概能知道它出自哪里，它的作用3.用命名空间把类似的方法组织到一起，有助于增强代码的文档性。  命名空间还可以进一步的分割，网页上的代码，除了你写的代码，还有库代码、广告代码、徽章代码等，这些变量都会出现在全局命名空间中， 为了避免冲突，可以定义一个包含自己所有代码的全局对象/* AllNamespace */var AllNamespace = {};AllNamespace.common = {  // ...};AllNamespace.ErrorCodes = {  // ...};来源于外部代码的与 AllNamespace 变量发生冲突的可能性比较小，如果真有冲突，也会很容易发现。  虽然中小项目开发参与人员不多，变量冲突的可能比较小，养成良好的习惯还是好的，自己也会更清晰。用作特定网页专用代码的包装器单体下面是包装特定网页专用代码的单体的骨架AllNamespace.PageName = {  constant1:true,  constant2:10,  method1:function(){    // ...  },  method2:function(){    // ...  }，  init:function(){    // ...  }}拥有私用成员的单体1.使用下划线表示法AllNamespace.DataParser = {  // private method  _function1:function(str){    // ....  }  // public method  function2:function(str){    // ...  }}由于在单体中使用 this 访问单体成员有一定的风险，因为它的 this 指向可能会不是指向 AllNamespace.DataParser，当然有的 js 库可能都会有作用域矫正，代码开发中可以去使用，去调试，只不过，使用 AllNamespace.DataParser 的方法去访问单体可能会更保险一点。2.使用闭包之前的单体是这样的：MyNamespace.singleton = {};现在我们首先用自执行函数创建一个基本的单体MyNamespace.singleton = (function () {  return {    // ...  };})();有些人喜欢在匿名函数的定义之外再加一个 (),这样会更醒目，更清晰一点。 你可以把公用成员返回到那个返回的字面量对象中。MyNamespace.singleton = (function () {  return {    // ...    attribute1: true,    attribute2: 10,    method1: function () {},    method2: function () {}  };})();不要忘了，我们之所以用闭包创建单体，是因为要拥有私有成员。MyNamespace.singleton = (function () {  // private 自己用的，不是给外界访问的  let privateAttr1 = true;  let privateMethod1 = function () {    // ...  };  return {    // public    // ...    attribute1: true,    attribute2: 10,    method1: function (str) {      // maybe      // let s = privateMethod1(str);      // return s;    },    method2: function () {}  };})();  使用闭包 相比 下划线来说,前者的私用成员是不能被外界访问的，后者只是用下划线特殊标识了一下，还是可以访问到的。惰性实例化单体（懒加载实例化单体）上面讲的那些单体，脚本加载时候就会被创建出来，对于资源密集型，配置开销比较大的单体，我们可以将其实例化推迟到需要适用它的时候这种懒加载的实现方法在于，实例化时候要借助于一个静态方法。适用方法类似于： Singleton.getInstance().methodName() getInstance 方法会检查单体是否已经被实例化，如果还么有，就创建它，返回实例。如果已经实例化过，就返回现有实例。MyNamespace.singleton = (function () {  var uniqueInstance;  function constructor() {    // private 自己用的，不是给外界访问的    let privateAttr1 = true;    let privateMethod1 = function () {      // ...    };    return {      // public      // ...      attribute1: true,      attribute2: 10,      method1: function (str) {        // maybe        // let s = privateMethod1(str);        // return s;      },      method2: function () {}    };  }  return {    getInstance: function () {      if (!uniqueInstance) {        uniqueInstance = constructor();      }      return uniqueInstance;    }  };})();// 使用： MyNamespace.singleton.getInstance().method1();单体的分支MyNamespace.singleton = (function () {  let objA = {    attribute1: true,    attribute2: 10,    method1: function () {},    method2: function () {}  };  let objB = {    attribute1: true,    attribute2: 10,    method1: function () {},    method2: function () {}  };  return someCondition ? objA : objB;})();如上就是单体的两个分支。我们可以根据各种场景创建多个分支。比如我们原生的 ajax请求封装时候，就需要兼容不同版本的api.  其实我们日常工作中，前端开发代码，我们已经在不知不觉中可能使用了单体模式，而理论是一种总结，可以让我们更清晰的了解它，掌握它。单体是一种有属性有方法的一个组织，用来模仿关联数组或者容纳数据的对象不是单体。  后面将一点一点的理解掌握一些实用，常见的设计模式。。"
  },
  
  {
    "title": "富文本中的图片是base64的，导致提交数据很大，接口响应很慢",
    "url": "/posts/%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%AFbase64%E7%9A%84-%E5%AF%BC%E8%87%B4%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E5%BE%88%E5%A4%A7-%E5%93%8D%E5%BA%94%E5%BE%88%E6%85%A2/",
    "categories": "工作中的问题",
    "tags": "富文本",
    "date": "2023-04-28 16:37:00 +0800",
    





    
    "snippet": "富文本中的图片是base64的，导致提交数据很大，接口响应很慢富文本编辑器 图片base64太长问题前端开发人员在遇到富文本编辑器的时候，经常会被测试 或者产品提各种需求优化或者一些体验的bug ;比如：  测试会提出富文本的内容过长，限制内容，限制输入等等类似的问题： 其实为什么是富文本，就是要写文章用的，这个用户行为，是不建议给限制的。 那么测试会提 内容太长，限制字数的问题，不用想，限...",
    "content": "富文本中的图片是base64的，导致提交数据很大，接口响应很慢富文本编辑器 图片base64太长问题前端开发人员在遇到富文本编辑器的时候，经常会被测试 或者产品提各种需求优化或者一些体验的bug ;比如：  测试会提出富文本的内容过长，限制内容，限制输入等等类似的问题： 其实为什么是富文本，就是要写文章用的，这个用户行为，是不建议给限制的。 那么测试会提 内容太长，限制字数的问题，不用想，限制不了的，字数是不准确的，包括了html标签，特殊符号等等,或者会说可以使用获取text content 等各个富文本组件对应的api。但是这个只是限制了text 或者content的长度，无法限制html string 的总长度的。  —&gt; 所以直白的结论是，这个限制富文本长度，富文本限制输入的问题，90% 不是问题，就是这样的，不用解决！或者限制一个极限最大长度，但这个对文章长度限制，几乎很微弱，不如让接口直接自己做长度安全限制。  富文本中，图片的复制粘贴的时候，图片会自动转为 base64格式的。加载在提交的html字符串中，一般来说，图片大小，转为base64之后的字符长度对应的数据大小比例为 pic/base64 ~= 1/1.3 或者可能会更大。一个500kb的图片，转换之后，大概650kb靠上，而且富文本提交时候，这是直接提交到接口上的，这个对项目接口的影响太大了，正常一个接口才上传一些json数据，这个就要上传几百kb,1Mb靠上等等。  —&gt; 这样不行的，目前本人的好的解决办法有两个:                  1.使用 html-base64-img-to-upload,在富文本数据提交接口的时候，识别字符串中的含有base64图片的标签，上传到目标oss云服务，或者自己的资源服务器，然后用上传后的地址替换到字符串中                    2.使用一些富文本编辑器的扩展插件，比如vue @vueup/vue-quill 编辑器中的扩展插件 quill-image-upload-v2,基本可以解决该问题，适当有一些小问题，影响不是很大。            "
  },
  
  {
    "title": "Vscode中组件输入点击事件@click后自动弹出$event=＞问题的解决",
    "url": "/posts/VSCode%E4%B8%AD%E7%BB%84%E4%BB%B6%E8%BE%93%E5%85%A5%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6@click%E5%90%8E%E8%87%AA%E5%8A%A8%E5%BC%B9%E5%87%BA$event=-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/",
    "categories": "",
    "tags": "",
    "date": "2023-04-21 00:00:00 +0800",
    





    
    "snippet": "在 Vue 中的点击事件 @click 后会自动补全一段“$event =&gt;”，这是 VSCode 中setting.json未设置好的缘故，具体情况如下：  如上图所示：“@click=”后面自动补全“$event =&gt;”这时候 操作 ctrl+shift+p ,搜索 setting.json打开 setting.json 文件并修改以下代码即可{  \"editor.inlay...",
    "content": "在 Vue 中的点击事件 @click 后会自动补全一段“$event =&gt;”，这是 VSCode 中setting.json未设置好的缘故，具体情况如下：  如上图所示：“@click=”后面自动补全“$event =&gt;”这时候 操作 ctrl+shift+p ,搜索 setting.json打开 setting.json 文件并修改以下代码即可{  \"editor.inlayHints.enabled\":\"offUnlessPressed\"}若没有该行代码,对应添加进去就可以了"
  },
  
  {
    "title": "为什么休5天，却惹来网友骂声一片，放不起别放！这是为啥？",
    "url": "/posts/%E4%BA%94%E4%B8%80-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%915%E5%A4%A9-%E5%8D%B4%E6%83%B9%E6%9D%A5%E7%BD%91%E5%8F%8B%E9%AA%82%E5%A3%B0%E4%B8%80%E7%89%87-%E6%94%BE%E4%B8%8D%E8%B5%B7%E5%88%AB%E6%94%BE-%E8%BF%99%E6%98%AF%E4%B8%BA%E5%95%A5/",
    "categories": "Blogging, Tutorial",
    "tags": "热门知识",
    "date": "2023-04-18 14:40:00 +0800",
    





    
    "snippet": "今天是4月18日，距离五一假期也不过两周而已，甚至两周远远不到。眼瞅着五一假期，能够美美的休息5天了，可是一些网友却不愿意了，甚至在网上口吐芬芳，这就纳闷了，好不容易能放个5天小长假，怎么会惹得如此争议？要知道早些年的时候五一放假法定节假日也不过3天而已，现在给你来回折腾，折腾出5天假期来，按理来说大家得开怀大笑，怎么感觉有点玩不起的样子？甚至还有一些网友在互联网上大放厥词，一些人就说了，这...",
    "content": "今天是4月18日，距离五一假期也不过两周而已，甚至两周远远不到。眼瞅着五一假期，能够美美的休息5天了，可是一些网友却不愿意了，甚至在网上口吐芬芳，这就纳闷了，好不容易能放个5天小长假，怎么会惹得如此争议？要知道早些年的时候五一放假法定节假日也不过3天而已，现在给你来回折腾，折腾出5天假期来，按理来说大家得开怀大笑，怎么感觉有点玩不起的样子？甚至还有一些网友在互联网上大放厥词，一些人就说了，这个假期不放也罢，你要是放不起那就别放，咱老老实实的回归3天假期。  其实啊，早些年的五一假期总的是3天假期的，再加上一个周六日就是5天假期了，那么这样，想法就来了，大家干脆前后调休一周，弄个五一七天乐好了，所以就有了“五一”7天假期的情况  那个，那个。。。，后来，7天假太长了，还是休5天吧，五一毕竟比不上国庆 ，所以法定时长由3天改回到了1天，再加上一个周六日，两天调休，“五一”5天假期的时代到来了  时间过了很久很久。。很久。。。。人们每年都过着5天的“五一”假期，其中2天是正常周六日，1天是五一放假时长，2天的前后调休时长，总的呢，就是5天。这种生活方式过了很久，终于 90后们，00后们，大家。。。觉得。。。。。。“五一”其实也就放了1天假啊，还不如不放呢！生活节奏都被调休打乱啦！。。。。按照这个节奏，我好像每个月调休一下，就能过一个”五一“小长假诶！。。于是，2023年4月18日，距离五一还有两周时间的时候，大家都在讨论着”五一”还不如不调休放1天呢，。。。。巴拉巴拉的各种激烈讨论和争论中，我想是不是会有什么轮回，终于有一天。。。五一不放假了？ 😀😀。。。。。或者人们又恢复到了 放假3天，总的调休加起来7天的轮回中。。。  ^_^"
  },
  
  {
    "title": "gpt4和chatgpt区别在哪里",
    "url": "/posts/gpt4%E5%92%8Cchatgpt%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%E9%87%8C/",
    "categories": "技术前沿",
    "tags": "热门知识",
    "date": "2023-04-14 00:42:00 +0800",
    





    
    "snippet": "gpt4和chatgpt都是由OpenAI公司开发的自然语言处理模型，gpt4和chatgpt的区别在于gpt4可以处理图像内容，可以更正确的理解信息和处理问题，且回复的准确性提高不少；chatgpt不支持图像内容处理，有时还会出现错误或者矛盾的回答。此外，GPT-4支持图文语义化的解读，以及更好的回答组织能力，而chatgpt则带来了AI对语义理解的突破。区别一：理解和推理能力gpt4和c...",
    "content": "gpt4和chatgpt都是由OpenAI公司开发的自然语言处理模型，gpt4和chatgpt的区别在于gpt4可以处理图像内容，可以更正确的理解信息和处理问题，且回复的准确性提高不少；chatgpt不支持图像内容处理，有时还会出现错误或者矛盾的回答。此外，GPT-4支持图文语义化的解读，以及更好的回答组织能力，而chatgpt则带来了AI对语义理解的突破。区别一：理解和推理能力gpt4和chatgpt都是基于深度学习的自然语言生成模型，但是它们之间有重要的区别。利用深度学习的方法，gpt4可以进行复杂、抽象问题的思考，可以根据内容推断出例如因果关系、逻辑传递等事物内在的联系，并且可以根据给出的上下文及文意中对目标的转变事实调整应对策略，表现非常智能。而chatgpt的理解和推理能力一般，仅能进行简单的理解和推理。区别二：知识的丰富程度gpt4可以根据任意的文本输入生成各种类型的文本输出，比如文章、诗歌、对话等。gpt4的优点是它可以适应不同的领域和场景，具有很强的泛化能力和创造力。并且回答准确，有深度，它可以处理数学题、物理题，可以分析网络热门内容进行归纳和总结，也可以解读文档、漫画等内容物，解释和生成它们的含义。而chatgpt对于提出的问题则可能会出现答非所问或矛盾的回答，甚至可能生成一些不符合逻辑或不相关的内容，或者缺乏特定领域的专业知识，显得不太AI智能。区别三：视觉分析能力和应用前景gpt4拥有chatgpt所不具备的视觉分析能力，它不仅可以识别文本内容，还能够处理图像、视频等视觉性内容，可以识别、描述、生成、编辑这些视觉性内容。另外，gpt4还拥有更加广阔的应用前景，它具备人类正常水平的语言理解能力和表述能力，可以在各个领域发挥出自身价值，例如可以扮演智能助理、娱乐玩伴、学习助手、教育工具等角色。而chatgpt则仅能够在特定范围内进行有限的任务处理，不具备这种多样性、复杂性、实时性、智能化的场景应对能力。"
  },
  
  {
    "title": "设计模式",
    "url": "/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
    "categories": "js设计模式理解",
    "tags": "js基础知识, js设计模式",
    "date": "2023-04-11 10:10:00 +0800",
    





    
    "snippet": "js设计模式什么是设计模式？先抛开javascript不讲，单单设计模式的定义：首先，设计模式可能你在平常开发中，已经或多或少的有类似的使用过了，我们只是给他起了一个理论概念的名字-设计模式，使其理论化，变得更容易总结，学习，易于使用。就像 笔直的打出去一圈，理论上或许交 冲拳，类似的道理；就像蔬菜我们一直在吃，现在我们要知道它是什么蔬菜，含有什么元素，具有什么功效。把它升级到理论总结，就变...",
    "content": "js设计模式什么是设计模式？先抛开javascript不讲，单单设计模式的定义：首先，设计模式可能你在平常开发中，已经或多或少的有类似的使用过了，我们只是给他起了一个理论概念的名字-设计模式，使其理论化，变得更容易总结，学习，易于使用。就像 笔直的打出去一圈，理论上或许交 冲拳，类似的道理；就像蔬菜我们一直在吃，现在我们要知道它是什么蔬菜，含有什么元素，具有什么功效。把它升级到理论总结，就变成了有用的知识，方便科学的使用。设计模式是指在软件设计中，被反复使用的一种代码设计经验。使用设计模式的目的是为了可重用代码，提高代码的可扩展性和可维护性学习设计模式，关键是学习设计思想，不能简单地生搬硬套，也不能为了使用设计模式而过度设计，要合理平衡设计的复杂度和灵活性，并意识到设计模式也并不是万能的。设计模式不单单是适用于javascript语言中的，它是一种理念，思路，解决方法，在其他程序应用中也同样适用。设计模式分类设计模式分为三种类型，共23种。创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。  后面将一点一点的理解掌握一些实用，常见的设计模式。。"
  },
  
  {
    "title": "js  JSON.parse解析出来会丢失函数类型的元素",
    "url": "/posts/JSON.parse%E8%A7%A3%E6%9E%90%E5%87%BA%E6%9D%A5%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%83%E7%B4%A0/",
    "categories": "js踩坑日记",
    "tags": "js踩坑日记",
    "date": "2022-08-03 11:20:00 +0800",
    





    
    "snippet": "JSON.parse解析出来会丢失函数类型的元素这个问题是在一次数据处理时候发现的，一个小坑，记录一下调试工具演示结果如下：",
    "content": "JSON.parse解析出来会丢失函数类型的元素这个问题是在一次数据处理时候发现的，一个小坑，记录一下调试工具演示结果如下："
  },
  
  {
    "title": "博客添加百度统计",
    "url": "/posts/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/",
    "categories": "Blogging, Tutorial",
    "tags": "博客",
    "date": "2022-05-15 11:12:00 +0800",
    





    
    "snippet": "现在有很多站长工具可以统计网站的点击量。添加方式大同小异。我添加的是 百度统计。注册添加后，会得到最新版的统计代码&lt;script&gt;var _hmt = _hmt || [];(function() {  var hm = document.createElement(\"script\");  hm.src = \"https://hm.baidu.com/hm.js?6b1bc98e...",
    "content": "现在有很多站长工具可以统计网站的点击量。添加方式大同小异。我添加的是 百度统计。注册添加后，会得到最新版的统计代码&lt;script&gt;var _hmt = _hmt || [];(function() {  var hm = document.createElement(\"script\");  hm.src = \"https://hm.baidu.com/hm.js?6b1bc98e5849783639bc900dd30b6240\";  var s = document.getElementsByTagName(\"script\")[0];   s.parentNode.insertBefore(hm, s);})();&lt;/script&gt;需要将这段代码添加到网站全部页面的head标签前建议在header.htm类似的页头模板页面中安装，以达到一处安装，全站皆有的效果。如果代码安装正确，一般20分钟后，可以查看网站分析数据在百度统计的网站中心tab中检查首页代码状态，显示代码安装正确，就成功了代码安装完成后，您可以在“代码安装检查”页面自动检测或手动检测代码安装情况  春天是美好的季节"
  },
  
  {
    "title": "今日热搜",
    "url": "/posts/%E4%BB%8A%E6%97%A5%E7%83%AD%E6%90%9C%E7%9C%8B%E7%82%B9/",
    "categories": "Blogging, Tutorial",
    "tags": "新闻",
    "date": "2022-04-11 10:10:00 +0800",
    





    
    "snippet": "今日百度热搜四川泸州一酒厂发生火灾造成4人死亡沙尘暴趁夜入京:口罩挡不住行人吃土两女子为吃自助餐回本被行拘女司机撞人拖行案受害方拒签谅解书男子潜入女邻居房间 称被香气迷住",
    "content": "今日百度热搜四川泸州一酒厂发生火灾造成4人死亡沙尘暴趁夜入京:口罩挡不住行人吃土两女子为吃自助餐回本被行拘女司机撞人拖行案受害方拒签谅解书男子潜入女邻居房间 称被香气迷住"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 07:32:00 +0800",
    





    
    "snippet": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature o...",
    "content": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You’ll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = {  'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID',  'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET',  'OAUTH_REDIRECT_URI': '%s%s' % (    'https://chirpy-test-XXXXXX.ue.r.appspot.com',    '/admin/auth'  )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend'              You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL.            From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage                 ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  pv:    proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;'    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters &#8617;      "
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    
    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to cr...",
    "content": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  GitHub Fork - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterSign in to GitHub and browse to Chirpy Starter, click the button Use this template &gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username.Option 2. GitHub ForkSign in to GitHub to fork Chirpy, and then rename it to USERNAME.github.io (USERNAME means your username).Next, clone your site to local machine. In order to build JavaScript files later, we need to install Node.js, and then run the tool:$ bash tools/init  If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Check out the code to the latest tag (to ensure the stability of your site: as the code for the default branch is under development).  Remove non-essential sample files and take care of GitHub-related files.  Build JavaScript files and export to assets/js/dist/, then make them tracked by Git.  Automatically create a new commit to save the changes above.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and run:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langCustomizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/jekyll-theme-chirpy.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\    --volume=\"$PWD:/srv/jekyll\" \\    -p 4000:4000 jekyll/jekyll \\    jekyll serveAfter a few seconds, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsThere are a few things to get ready for.  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, go the the root of your site and update the platform list of the lock-file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service.      Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  At this point, you can go to the URL indicated by GitHub to access your site.Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\    --env JEKYLL_ENV=production \\    --volume=\"$PWD:/srv/jekyll\" \\    jekyll/jekyll \\    jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the img_path can also be passed to the preview image, that is, when it has been set, the  attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post Text and Typography.For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.VideosYou can embed a video with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211      Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 ...",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\"MathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;              The 2nd footnote source &#8617;      "
  }
  
]

