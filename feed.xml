

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>王的宇</title>
  <subtitle>frontend, 一个前端开发技术总结的博客.</subtitle>
  <updated>2023-06-16T18:08:04+08:00</updated>
  <author>
    <name>xiangchuifeng</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 xiangchuifeng </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>js设计模式-享元模式</title>
    <link href="/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="js设计模式-享元模式" />
    <published>2023-06-13T11:17:00+08:00</published>
  
    <updated>2023-06-13T11:17:00+08:00</updated>
  
    <id>/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <content src="/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/" />
    <author>
      <name>xiangchuifeng</name>
    </author>

  
    
    <category term="js设计模式理解" />
    
  

  
    <summary>
      





      享元模式


  “享元”,被共享的单元,即复用对象,节省内存,注意前提是享元对象是不可变对象。



  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。


个人感觉这个享元模式，初步看上去，大概可以理解为一种写代码的良好习惯，性能优化、去掉冗余，在代码开发时候，要避免影响性能的不良习惯。
简单概括就是 dom 创建加载，变量，缓存，代码重用 等等能节省代码执行开支的地方就去优化，去节省。
在编程语言中共有的的理念即：抽离，封装，继承，多态，享元模式也蕴藏了此理念。

享元模式的基本概念：
享元是一种结构型设计模式，它允许你在消耗少量内存的情况下支持大量对象。
模式通过共享多个对象的部分状态来实现上述功能。换句话来说，享元会将不同对象的相同数据进行缓存以节省内存

用一个简单的例子，我们看一下，找找感觉，这个设计模式 很基础，甚...
    </summary>
  

  </entry>

  
  <entry>
    <title>前端常用的地图框架</title>
    <link href="/posts/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%A1%86%E6%9E%B6/" rel="alternate" type="text/html" title="前端常用的地图框架" />
    <published>2023-06-11T01:04:00+08:00</published>
  
    <updated>2023-06-11T01:04:00+08:00</updated>
  
    <id>/posts/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%A1%86%E6%9E%B6/</id>
    <content src="/posts/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%A1%86%E6%9E%B6/" />
    <author>
      <name>xiangchuifeng</name>
    </author>

  
    
    <category term="gis地图相关" />
    
  

  
    <summary>
      





      前端常用的地图框架（webGIS）


  
    Leaflet
Leaflet 是最著名的前端地图可视化库，它开源、体积小、结构清晰、简单易用。
  
  
    Mapbox GL JS
Mapbox GL JS 是目前最新潮的前端地图库，它的矢量压缩、动态样式和三维性能令人印象深刻。它本身是开源的，但一般依赖于Mapbox公司提供的底图服务。
  
  
    ArcGIS API for JS
ArcGIS API for JS 是较为学院派的前端地图库，它是ArcGIS开发套件中的一部分，和桌面端和服务器端ArcGIS软件有较好的协作。它不开源且收费不低，在学术场景下较为常用。
  
  
    Openlayers
Openlayers 也是常用的前端地图库，它开源，相比于Leaflet更加复杂和完备。
  
  
    Cesium
Cesium 是三维地理...
    </summary>
  

  </entry>

  
  <entry>
    <title>AIGC的概念，和chatgpt有什么关联？</title>
    <link href="/posts/AIGC%E7%9A%84%E6%A6%82%E5%BF%B5-%E5%92%8Cchatgpt%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E8%81%94/" rel="alternate" type="text/html" title="AIGC的概念，和chatgpt有什么关联？" />
    <published>2023-06-06T09:47:00+08:00</published>
  
    <updated>2023-06-06T09:47:00+08:00</updated>
  
    <id>/posts/AIGC%E7%9A%84%E6%A6%82%E5%BF%B5-%E5%92%8Cchatgpt%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E8%81%94/</id>
    <content src="/posts/AIGC%E7%9A%84%E6%A6%82%E5%BF%B5-%E5%92%8Cchatgpt%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E8%81%94/" />
    <author>
      <name>xiangchuifeng</name>
    </author>

  
    
    <category term="技术前沿" />
    
    <category term="AIGC" />
    
    <category term="ChatGpt" />
    
  

  
    <summary>
      





      AIGC 和 ChatGPT 是两个不同的概念，但是有一定的联系和关联.

AIGC 是 AI Generate Content 的意思，意味着人工智能生成的内容。AIGC 是一种利用人工智能技术自动化地生成各种类型的内容的方式，例如文本、音频、图像、视频等。


  AIGC 可以应用在多个领域和场景，例如网络营销、品牌宣传、产品介绍、自动化客服、自动化翻译、自动化作曲等等
  AIGC 的优点是可以大量且快速地生成高质量的内容，节省时间和人力，提高效率和精确度
  AIGC 智能生成的图片，体现了一种科学美，技术美


不过，它也有一些缺点，首先比较明显的是，它会不会带来创作内容的产权问题，图片内容的产权问题等，其次，它生成的内容可能会比较缺少人情味，缺少一些灵动美。

下面可以概览一些 AIGC 图片：

一艘游轮行驶在波涛汹涌的陆地上 彩色斑斓


朦胧未来的空间站程序员

...
    </summary>
  

  </entry>

  
  <entry>
    <title>naive-ui中Anchor点击侧边栏锚点时候却跳转新页面的解决</title>
    <link href="/posts/naive-ui%E4%B8%ADAnchor%E7%82%B9%E5%87%BB%E9%94%9A%E7%82%B9%E6%97%B6%E5%80%99%E5%8D%B4%E8%B7%B3%E8%BD%AC%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3/" rel="alternate" type="text/html" title="naive-ui中Anchor点击侧边栏锚点时候却跳转新页面的解决" />
    <published>2023-05-22T10:26:00+08:00</published>
  
    <updated>2023-05-22T10:26:00+08:00</updated>
  
    <id>/posts/naive-ui%E4%B8%ADAnchor%E7%82%B9%E5%87%BB%E9%94%9A%E7%82%B9%E6%97%B6%E5%80%99%E5%8D%B4%E8%B7%B3%E8%BD%AC%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3/</id>
    <content src="/posts/naive-ui%E4%B8%ADAnchor%E7%82%B9%E5%87%BB%E9%94%9A%E7%82%B9%E6%97%B6%E5%80%99%E5%8D%B4%E8%B7%B3%E8%BD%AC%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3/" />
    <author>
      <name>xiangchuifeng</name>
    </author>

  
    
    <category term="ui组件库问题解决" />
    
    <category term="naive-ui" />
    
  

  
    <summary>
      





      naive-ui中Anchor点击侧边栏导航锚点跳转，却是新页面的问题；

最近开发过程用 有使用锚点定位跳转的功能，于是使用了naive-ui的Anchor组件，组件demo代码 套用到项目上的时候，右侧内容滚动时候，侧边栏的锚点会
自动高亮，这个是没有问题的，然后问题来了，点击左边锚点时候，右边的页面不会定向到对应位置，而是跳转了新页面，因为vue-router路由模式把锚点定位
理解成了新页面的跳转。

再回头看了一下 naive-ui组件说明，它是提供的有组件方法的，scrollTo,但是点击事件直接是默认的组件里面的a链接跳转，跳珠到了新页面。
终于在思考了片刻之后，想到组件上使用点击事件加vue指令的修饰符应该是可以解决的。

于是最终解决方案如下：

&amp;lt;n-anchor
  ref="anchorRef"
  :show-rail="showRail"
  :sh...
    </summary>
  

  </entry>

  
  <entry>
    <title>js设计模式-方法的链式调用</title>
    <link href="/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%96%B9%E6%B3%95%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/" rel="alternate" type="text/html" title="js设计模式-方法的链式调用" />
    <published>2023-05-12T17:02:00+08:00</published>
  
    <updated>2023-05-12T17:02:00+08:00</updated>
  
    <id>/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%96%B9%E6%B3%95%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</id>
    <content src="/posts/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%96%B9%E6%B3%95%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/" />
    <author>
      <name>xiangchuifeng</name>
    </author>

  
    
    <category term="js设计模式理解" />
    
  

  
    <summary>
      





      链式调用

链式调用是简单来讲就是 一个对象/主体 调用的方法，可以返回主体本身，可以接着去访问主体的下一个方法或者操作 ,它是一种语法招数。


  用一天的时间，抽空看完一种设计模式，或者两天，还是有收获的，我们需要耐心，这个从长远来说，不算慢的。


// 大概这个意思
function b(dataIn) {
  // ...
  return dataIn;
}


链式调用可以让代码的可读性更好，代码结构更清晰，易读， 减少了代码量。如下所示对比：


  baby.read();
  baby.write();
  baby.eatFood();
  baby.sleep();

  baby.read().write().eatFood().sleep()......



a.b().c()
比如我们以前用的 jquery.js,就是用的链式调用。

$("div"...
    </summary>
  

  </entry>

</feed>


